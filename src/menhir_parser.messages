module_: LPAR MODULE ID XOR
##
## Ends in an error in state: 4.
##
## module_ -> LPAR MODULE option(id) . list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3800.
##
## module_field -> ELEM option(id) DECLARE EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3799.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE EXTERN_REF XOR
##
## Ends in an error in state: 3798.
##
## module_field -> ELEM option(id) DECLARE EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE FUNC XOR
##
## Ends in an error in state: 3796.
##
## module_field -> ELEM option(id) DECLARE FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3792.
##
## module_field -> ELEM option(id) DECLARE FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE FUNC_REF LPAR XOR
##
## Ends in an error in state: 3791.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE FUNC_REF XOR
##
## Ends in an error in state: 3790.
##
## module_field -> ELEM option(id) DECLARE FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM DECLARE XOR
##
## Ends in an error in state: 3789.
##
## module_field -> ELEM option(id) DECLARE . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) DECLARE . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) DECLARE . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) DECLARE . EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) DECLARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3785.
##
## module_field -> ELEM option(id) EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3784.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM EXTERN_REF XOR
##
## Ends in an error in state: 3783.
##
## module_field -> ELEM option(id) EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC ID XOR
##
## Ends in an error in state: 3558.
##
## list(elem_var) -> ID . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC NUM XOR
##
## Ends in an error in state: 3557.
##
## list(elem_var) -> NUM . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC XOR
##
## Ends in an error in state: 3781.
##
## module_field -> ELEM option(id) FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3547.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 3546.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3543.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 3542.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 3541.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 3540.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR BLOCK XOR
##
## Ends in an error in state: 3539.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3532.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 3531.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3528.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 3527.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 3526.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 3525.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 3524.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3521.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 3520.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3517.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3516.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 3515.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 3514.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 3513.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3511.
##
## expr -> LPAR IF if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3509.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3508.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 3507.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3505.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3504.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 3503.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 3502.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF LPAR XOR
##
## Ends in an error in state: 3501.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR IF XOR
##
## Ends in an error in state: 3500.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3777.
##
## module_field -> ELEM option(id) FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3492.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3491.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3488.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3487.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3486.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP LPAR XOR
##
## Ends in an error in state: 3485.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR LOOP XOR
##
## Ends in an error in state: 3484.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR SELECT XOR
##
## Ends in an error in state: 3481.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR UNREACHABLE XOR
##
## Ends in an error in state: 3552.
##
## expr -> LPAR plain_instr . expr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF LPAR XOR
##
## Ends in an error in state: 3776.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM FUNC_REF XOR
##
## Ends in an error in state: 3775.
##
## module_field -> ELEM option(id) FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM ID DATA
##
## Ends in an error in state: 3469.
##
## module_field -> ELEM option(id) . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE ID expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . TABLE NUM expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . DECLARE FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . DECLARE FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . DECLARE FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . DECLARE EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . DECLARE EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) . expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) . expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) . LPAR OFFSET instr_list RPAR list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) . expr list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3767.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 3766.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3763.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 3762.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 3761.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 3760.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR BLOCK XOR
##
## Ends in an error in state: 3759.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3752.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 3751.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3748.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 3747.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 3746.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 3745.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 3744.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3741.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 3740.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3737.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3736.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 3735.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 3734.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 3733.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3731.
##
## expr -> LPAR IF if_block_param_body . RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3729.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3728.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 3727.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3725.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3724.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 3723.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 3722.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF LPAR XOR
##
## Ends in an error in state: 3721.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR IF XOR
##
## Ends in an error in state: 3720.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOCAL XOR
##
## Ends in an error in state: 817.
##
## plain_instr -> LOCAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT GET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3715.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3714.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3711.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3710.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3709.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP LPAR XOR
##
## Ends in an error in state: 3708.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR LOOP XOR
##
## Ends in an error in state: 3707.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3702.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3701.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3700.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 3698.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3694.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3693.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 3692.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 3691.
##
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET instr_list RPAR . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR OFFSET XOR
##
## Ends in an error in state: 3689.
##
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR OFFSET . instr_list RPAR list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3815.
##
## module_field -> ELEM option(id) expr EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3814.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) expr EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3813.
##
## module_field -> ELEM option(id) expr EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) expr EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 3811.
##
## module_field -> ELEM option(id) expr FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3807.
##
## module_field -> ELEM option(id) expr FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3806.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) expr FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 3805.
##
## module_field -> ELEM option(id) expr FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) expr FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT RPAR XOR
##
## Ends in an error in state: 3804.
##
## module_field -> ELEM option(id) expr . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) expr . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) expr . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) expr . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) expr . EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) expr . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR SELECT XOR
##
## Ends in an error in state: 3686.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR UNREACHABLE XOR
##
## Ends in an error in state: 3772.
##
## expr -> LPAR plain_instr . expr_list RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM LPAR XOR
##
## Ends in an error in state: 3685.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR NUM ID FUNC_REF FUNC EXTERN_REF ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) LPAR . OFFSET instr_list RPAR list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3666.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3665.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3664.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 3662.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3658.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3657.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 3656.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 3655.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR OFFSET XOR
##
## Ends in an error in state: 3653.
##
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3681.
##
## module_field -> ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3680.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3679.
##
## module_field -> ELEM option(id) TABLE ID expr EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 3677.
##
## module_field -> ELEM option(id) TABLE ID expr FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3673.
##
## module_field -> ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3672.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 3671.
##
## module_field -> ELEM option(id) TABLE ID expr FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR SELECT RPAR XOR
##
## Ends in an error in state: 3670.
##
## module_field -> ELEM option(id) TABLE ID expr . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID expr . EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID LPAR XOR
##
## Ends in an error in state: 3652.
##
## expr -> LPAR . plain_instr expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## module_field -> ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE ID XOR
##
## Ends in an error in state: 3651.
##
## module_field -> ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE ID . expr EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3628.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 3627.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3624.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 3623.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 3622.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 3621.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR BLOCK XOR
##
## Ends in an error in state: 3620.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3613.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 3612.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3609.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 3608.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 3607.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 3606.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 3605.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3602.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 3601.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3598.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3597.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 3596.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 3595.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 3594.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3592.
##
## expr -> LPAR IF if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3590.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3589.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 3588.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3586.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3585.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 3584.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 3583.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF LPAR XOR
##
## Ends in an error in state: 3582.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR IF XOR
##
## Ends in an error in state: 3581.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3576.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3575.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3572.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3571.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3570.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP LPAR XOR
##
## Ends in an error in state: 3569.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR LOOP XOR
##
## Ends in an error in state: 3568.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3564.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3563.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3562.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 3556.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3497.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3480.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 3479.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 3478.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR . EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR OFFSET XOR
##
## Ends in an error in state: 3476.
##
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET . instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET . instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR OFFSET . instr_list RPAR EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 3647.
##
## module_field -> ELEM option(id) TABLE NUM expr EXTERN_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 3646.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr EXTERN_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 3645.
##
## module_field -> ELEM option(id) TABLE NUM expr EXTERN_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr EXTERN_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 3643.
##
## module_field -> ELEM option(id) TABLE NUM expr FUNC . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 3639.
##
## module_field -> ELEM option(id) TABLE NUM expr FUNC_REF LPAR ITEM . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 3638.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr FUNC_REF LPAR . ITEM instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 3637.
##
## module_field -> ELEM option(id) TABLE NUM expr FUNC_REF . LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr FUNC_REF . expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT RPAR XOR
##
## Ends in an error in state: 3636.
##
## module_field -> ELEM option(id) TABLE NUM expr . FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr . FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr . FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr . EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM expr . EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR SELECT XOR
##
## Ends in an error in state: 3473.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR UNREACHABLE XOR
##
## Ends in an error in state: 3633.
##
## expr -> LPAR plain_instr . expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM LPAR XOR
##
## Ends in an error in state: 3472.
##
## expr -> LPAR . plain_instr expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## module_field -> ELEM option(id) TABLE NUM LPAR . OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR . OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM LPAR . OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE NUM XOR
##
## Ends in an error in state: 3471.
##
## module_field -> ELEM option(id) TABLE NUM . LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE NUM . expr EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM TABLE XOR
##
## Ends in an error in state: 3470.
##
## module_field -> ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . ID expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM option(id) TABLE . NUM expr EXTERN_REF expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM option(id) TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ELEM XOR
##
## Ends in an error in state: 3467.
##
## module_field -> ELEM . option(id) FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE ID expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) TABLE NUM expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) DECLARE FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) DECLARE FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) DECLARE FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) DECLARE EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) DECLARE EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) expr FUNC list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) expr FUNC_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) expr FUNC_REF expr [ RPAR ]
## module_field -> ELEM . option(id) expr EXTERN_REF LPAR ITEM instr_list RPAR [ RPAR ]
## module_field -> ELEM . option(id) expr EXTERN_REF expr [ RPAR ]
## module_field -> ELEM . option(id) LPAR OFFSET instr_list RPAR list(elem_var) [ RPAR ]
## module_field -> ELEM . option(id) expr list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR FUNC ID XOR
##
## Ends in an error in state: 3465.
##
## module_field -> EXPORT NAME LPAR FUNC ID . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR FUNC NUM XOR
##
## Ends in an error in state: 3463.
##
## module_field -> EXPORT NAME LPAR FUNC NUM . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR FUNC NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR FUNC XOR
##
## Ends in an error in state: 3462.
##
## module_field -> EXPORT NAME LPAR FUNC . ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR FUNC . NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR GLOBAL ID XOR
##
## Ends in an error in state: 3460.
##
## module_field -> EXPORT NAME LPAR GLOBAL ID . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR GLOBAL ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR GLOBAL NUM XOR
##
## Ends in an error in state: 3458.
##
## module_field -> EXPORT NAME LPAR GLOBAL NUM . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR GLOBAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR GLOBAL XOR
##
## Ends in an error in state: 3457.
##
## module_field -> EXPORT NAME LPAR GLOBAL . ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR GLOBAL . NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR MEMORY ID XOR
##
## Ends in an error in state: 3455.
##
## module_field -> EXPORT NAME LPAR MEMORY ID . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR MEMORY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR MEMORY NUM XOR
##
## Ends in an error in state: 3453.
##
## module_field -> EXPORT NAME LPAR MEMORY NUM . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR MEMORY NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR MEMORY XOR
##
## Ends in an error in state: 3452.
##
## module_field -> EXPORT NAME LPAR MEMORY . ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR MEMORY . NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR TABLE ID XOR
##
## Ends in an error in state: 3450.
##
## module_field -> EXPORT NAME LPAR TABLE ID . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR TABLE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR TABLE NUM XOR
##
## Ends in an error in state: 3448.
##
## module_field -> EXPORT NAME LPAR TABLE NUM . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR TABLE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR TABLE XOR
##
## Ends in an error in state: 3447.
##
## module_field -> EXPORT NAME LPAR TABLE . ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR TABLE . NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME LPAR XOR
##
## Ends in an error in state: 3446.
##
## module_field -> EXPORT NAME LPAR . FUNC ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . FUNC NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . TABLE ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . TABLE NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . MEMORY ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . MEMORY NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . GLOBAL ID RPAR [ RPAR ]
## module_field -> EXPORT NAME LPAR . GLOBAL NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT NAME XOR
##
## Ends in an error in state: 3445.
##
## module_field -> EXPORT NAME . LPAR FUNC ID RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR FUNC NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR TABLE ID RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR TABLE NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR MEMORY ID RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR MEMORY NUM RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR GLOBAL ID RPAR [ RPAR ]
## module_field -> EXPORT NAME . LPAR GLOBAL NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR EXPORT XOR
##
## Ends in an error in state: 3444.
##
## module_field -> EXPORT . NAME LPAR FUNC ID RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR FUNC NUM RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR TABLE ID RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR TABLE NUM RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR MEMORY ID RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR MEMORY NUM RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR GLOBAL ID RPAR [ RPAR ]
## module_field -> EXPORT . NAME LPAR GLOBAL NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK END XOR
##
## Ends in an error in state: 2316.
##
## instr_list -> BLOCK block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2307.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2306.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2303.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2302.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2301.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 2300.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR BLOCK XOR
##
## Ends in an error in state: 2299.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2292.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2291.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2288.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2287.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2286.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2285.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2284.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2187.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2186.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2181.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2180.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2179.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2178.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 2177.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2821.
##
## expr -> LPAR IF if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2819.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2818.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2817.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2815.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 832.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 831.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 830.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF LPAR XOR
##
## Ends in an error in state: 829.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR IF XOR
##
## Ends in an error in state: 828.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3133.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3132.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 272.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 271.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 270.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP LPAR XOR
##
## Ends in an error in state: 269.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR LOOP XOR
##
## Ends in an error in state: 268.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 263.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2175.
##
## block_param_body -> LPAR PARAM list(val_type) RPAR . block_param_body [ END ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR PARAM XOR
##
## Ends in an error in state: 2173.
##
## block_param_body -> LPAR PARAM . list(val_type) RPAR block_param_body [ END ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 267.
##
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR RESULT RPAR XOR
##
## Ends in an error in state: 266.
##
## block_result_body -> LPAR RESULT list(val_type) RPAR . block_result_body [ END ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR RESULT XOR
##
## Ends in an error in state: 264.
##
## block_result_body -> LPAR RESULT . list(val_type) RPAR block_result_body [ END ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR SELECT XOR
##
## Ends in an error in state: 252.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2171.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2169.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2168.
##
## instr_list -> BLOCK LPAR TYPE ID . RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 2162.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2160.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2159.
##
## instr_list -> BLOCK LPAR TYPE NUM . RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2158.
##
## instr_list -> BLOCK LPAR TYPE . ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> BLOCK LPAR TYPE . NUM RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR UNREACHABLE XOR
##
## Ends in an error in state: 2312.
##
## expr -> LPAR plain_instr . expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK LPAR XOR
##
## Ends in an error in state: 2157.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> BLOCK LPAR . TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> BLOCK LPAR . TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BLOCK XOR
##
## Ends in an error in state: 2156.
##
## instr_list -> BLOCK . LPAR TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> BLOCK . LPAR TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> BLOCK . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BR XOR
##
## Ends in an error in state: 2153.
##
## plain_instr -> BR . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BR . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC BRIF XOR
##
## Ends in an error in state: 2150.
##
## plain_instr -> BRIF . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BRIF . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL XOR
##
## Ends in an error in state: 2146.
##
## plain_instr -> CALL . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> CALL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2693.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2692.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2689.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2688.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2687.
##
## call_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK LPAR XOR
##
## Ends in an error in state: 2686.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT BLOCK XOR
##
## Ends in an error in state: 2685.
##
## call_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2716.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2715.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2713.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2712.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2711.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2710.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2709.
##
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2703.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2702.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2684.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2683.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2682.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2681.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2680.
##
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2785.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2784.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2783.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2780.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2779.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2778.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2777.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2776.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID UNREACHABLE XOR
##
## Ends in an error in state: 2788.
##
## instr_list -> CALL_INDIRECT ID call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2775.
##
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT ID . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF ELSE XOR
##
## Ends in an error in state: 2677.
##
## call_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2672.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2669.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2668.
##
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2665.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2662.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 2661.
##
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR TYPE XOR
##
## Ends in an error in state: 2660.
##
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF LPAR XOR
##
## Ends in an error in state: 2659.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT IF XOR
##
## Ends in an error in state: 2658.
##
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2653.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2652.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2649.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 2648.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 2647.
##
## call_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP LPAR XOR
##
## Ends in an error in state: 2646.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LOOP XOR
##
## Ends in an error in state: 2645.
##
## call_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2756.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2764.
##
## call_instr_params -> LPAR PARAM list(val_type) RPAR . call_instr_params [ RPAR ]
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2762.
##
## call_instr_params -> LPAR PARAM . list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2760.
##
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2759.
##
## call_instr_results -> LPAR RESULT list(val_type) RPAR . call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2757.
##
## call_instr_results -> LPAR RESULT . list(val_type) RPAR call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2772.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2771.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2770.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2767.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2755.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2754.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2753.
##
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2752.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT SELECT XOR
##
## Ends in an error in state: 1247.
##
## call_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT UNREACHABLE XOR
##
## Ends in an error in state: 2791.
##
## instr_list -> CALL_INDIRECT call_instr_params_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC CALL_INDIRECT XOR
##
## Ends in an error in state: 1246.
##
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . ID call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT . ID call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ RPAR ]
## instr_list -> CALL_INDIRECT . call_instr_params_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC DATA DOT DROP XOR
##
## Ends in an error in state: 1243.
##
## plain_instr -> DATA DOT DROP . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT DROP . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC DATA DOT XOR
##
## Ends in an error in state: 1242.
##
## plain_instr -> DATA DOT . DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT . DROP NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC DATA XOR
##
## Ends in an error in state: 1241.
##
## plain_instr -> DATA . DOT DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA . DOT DROP NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC ELEM DOT DROP XOR
##
## Ends in an error in state: 1237.
##
## plain_instr -> ELEM DOT DROP . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT DROP . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC ELEM DOT XOR
##
## Ends in an error in state: 1236.
##
## plain_instr -> ELEM DOT . DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT . DROP NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC ELEM XOR
##
## Ends in an error in state: 1235.
##
## plain_instr -> ELEM . DOT DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM . DOT DROP NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT CONST XOR
##
## Ends in an error in state: 1230.
##
## plain_instr -> F32 DOT CONST . FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1227.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1224.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1223.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT CONVERT XOR
##
## Ends in an error in state: 1222.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1212.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1211.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1210.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1209.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1208.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT LOAD XOR
##
## Ends in an error in state: 1207.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1197.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1196.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1193.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1192.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1191.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1190.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1189.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT STORE XOR
##
## Ends in an error in state: 1188.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 DOT XOR
##
## Ends in an error in state: 1185.
##
## plain_instr -> F32 DOT . CONST FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F32 XOR
##
## Ends in an error in state: 1184.
##
## plain_instr -> F32 . DOT CONST FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1178.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1175.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1174.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT CONVERT XOR
##
## Ends in an error in state: 1173.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1164.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1163.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1162.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1161.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1160.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT LOAD XOR
##
## Ends in an error in state: 1159.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1148.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 1147.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1144.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1143.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1142.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1141.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1140.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT STORE XOR
##
## Ends in an error in state: 1139.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 DOT XOR
##
## Ends in an error in state: 1136.
##
## plain_instr -> F64 DOT . ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC F64 XOR
##
## Ends in an error in state: 1135.
##
## plain_instr -> F64 . DOT ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC GLOBAL DOT GET XOR
##
## Ends in an error in state: 1132.
##
## plain_instr -> GLOBAL DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC GLOBAL DOT SET XOR
##
## Ends in an error in state: 1129.
##
## plain_instr -> GLOBAL DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC GLOBAL DOT XOR
##
## Ends in an error in state: 1128.
##
## plain_instr -> GLOBAL DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC GLOBAL XOR
##
## Ends in an error in state: 1127.
##
## plain_instr -> GLOBAL . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT CONST XOR
##
## Ends in an error in state: 1122.
##
## plain_instr -> I32 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT DIV XOR
##
## Ends in an error in state: 1118.
##
## plain_instr -> I32 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 1114.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 1112.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT GE XOR
##
## Ends in an error in state: 1109.
##
## plain_instr -> I32 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT GT XOR
##
## Ends in an error in state: 1106.
##
## plain_instr -> I32 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LE XOR
##
## Ends in an error in state: 1103.
##
## plain_instr -> I32 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1101.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1100.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1099.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1098.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1097.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD XOR
##
## Ends in an error in state: 1096.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1094.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1093.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1092.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1091.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1090.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1089.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1087.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1086.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1085.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1084.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1083.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1082.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD16 XOR
##
## Ends in an error in state: 1081.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1079.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1078.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1077.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1076.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1075.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1074.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1072.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1071.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1070.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1069.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1068.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1067.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LOAD8 XOR
##
## Ends in an error in state: 1066.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT LT XOR
##
## Ends in an error in state: 1063.
##
## plain_instr -> I32 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1056.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1055.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT REM XOR
##
## Ends in an error in state: 1052.
##
## plain_instr -> I32 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT SHR XOR
##
## Ends in an error in state: 1046.
##
## plain_instr -> I32 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1044.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1043.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1042.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1041.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1040.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE XOR
##
## Ends in an error in state: 1039.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1037.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1036.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1035.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1034.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1033.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE16 XOR
##
## Ends in an error in state: 1032.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1030.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1029.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1028.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1027.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1026.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT STORE8 XOR
##
## Ends in an error in state: 1025.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1021.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1018.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1015.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1012.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 1011.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 1010.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 1009.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT TRUNC XOR
##
## Ends in an error in state: 1008.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 DOT UNSIGNED
##
## Ends in an error in state: 1005.
##
## plain_instr -> I32 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . WRAPI64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I32 XOR
##
## Ends in an error in state: 1004.
##
## plain_instr -> I32 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT WRAPI64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT CONST XOR
##
## Ends in an error in state: 999.
##
## plain_instr -> I64 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT DIV XOR
##
## Ends in an error in state: 995.
##
## plain_instr -> I64 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 991.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 989.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 987.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 984.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT GE XOR
##
## Ends in an error in state: 981.
##
## plain_instr -> I64 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT GT XOR
##
## Ends in an error in state: 978.
##
## plain_instr -> I64 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LE XOR
##
## Ends in an error in state: 975.
##
## plain_instr -> I64 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 973.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 972.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 971.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 970.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 969.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD XOR
##
## Ends in an error in state: 968.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 966.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 965.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 964.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 963.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 962.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 961.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 959.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 958.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 957.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 956.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 955.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 954.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD16 XOR
##
## Ends in an error in state: 953.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 951.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 950.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 949.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 948.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 947.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 946.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 944.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 943.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 942.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 941.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 940.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 939.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD32 XOR
##
## Ends in an error in state: 938.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 936.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 935.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 934.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 933.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 932.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 931.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 929.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 928.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 927.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 926.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 925.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 924.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LOAD8 XOR
##
## Ends in an error in state: 923.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT LT XOR
##
## Ends in an error in state: 920.
##
## plain_instr -> I64 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 913.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 912.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT REM XOR
##
## Ends in an error in state: 909.
##
## plain_instr -> I64 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT SHR XOR
##
## Ends in an error in state: 903.
##
## plain_instr -> I64 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 901.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 900.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 899.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 898.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 897.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE XOR
##
## Ends in an error in state: 896.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 894.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 893.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 892.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 891.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 890.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE16 XOR
##
## Ends in an error in state: 889.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 887.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 886.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 885.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 884.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 883.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE32 XOR
##
## Ends in an error in state: 882.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 880.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 879.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 878.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 877.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 876.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT STORE8 XOR
##
## Ends in an error in state: 875.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 871.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 868.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 865.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 862.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 861.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 860.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 859.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT TRUNC XOR
##
## Ends in an error in state: 858.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 DOT WRAPI64
##
## Ends in an error in state: 856.
##
## plain_instr -> I64 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC I64 XOR
##
## Ends in an error in state: 855.
##
## plain_instr -> I64 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC ID AND
##
## Ends in an error in state: 3375.
##
## module_field -> FUNC option(id) . func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## FUNC option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK END XOR
##
## Ends in an error in state: 2411.
##
## instr_list -> BLOCK block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2408.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2406.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2405.
##
## instr_list -> BLOCK LPAR TYPE ID . RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 1687.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1681.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 1680.
##
## instr_list -> BLOCK LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1679.
##
## instr_list -> BLOCK LPAR TYPE . ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> BLOCK LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK LPAR XOR
##
## Ends in an error in state: 1678.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> BLOCK LPAR . TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> BLOCK LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BLOCK XOR
##
## Ends in an error in state: 1677.
##
## instr_list -> BLOCK . LPAR TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> BLOCK . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> BLOCK . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BR XOR
##
## Ends in an error in state: 1674.
##
## plain_instr -> BR . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BR . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF BRIF XOR
##
## Ends in an error in state: 1671.
##
## plain_instr -> BRIF . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BRIF . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL XOR
##
## Ends in an error in state: 1667.
##
## plain_instr -> CALL . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> CALL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2494.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2493.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2490.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2489.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2488.
##
## call_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK LPAR XOR
##
## Ends in an error in state: 2487.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT BLOCK XOR
##
## Ends in an error in state: 2486.
##
## call_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2517.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2516.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2514.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2513.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2512.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2511.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2510.
##
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2504.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2503.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2485.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2484.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2483.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2482.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2481.
##
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2586.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2585.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2584.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2581.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2580.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2579.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2578.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2577.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ELSE ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID UNREACHABLE XOR
##
## Ends in an error in state: 2589.
##
## instr_list -> CALL_INDIRECT ID call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2576.
##
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT ID . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF ELSE XOR
##
## Ends in an error in state: 2478.
##
## call_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2473.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2470.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2469.
##
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2466.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2463.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 2462.
##
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR TYPE XOR
##
## Ends in an error in state: 2461.
##
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF LPAR XOR
##
## Ends in an error in state: 2460.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT IF XOR
##
## Ends in an error in state: 2459.
##
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2454.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2453.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2450.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 2449.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 2448.
##
## call_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP LPAR XOR
##
## Ends in an error in state: 2447.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LOOP XOR
##
## Ends in an error in state: 2446.
##
## call_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2557.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ELSE ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2565.
##
## call_instr_params -> LPAR PARAM list(val_type) RPAR . call_instr_params [ END ELSE ]
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2563.
##
## call_instr_params -> LPAR PARAM . list(val_type) RPAR call_instr_params [ END ELSE ]
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2561.
##
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2560.
##
## call_instr_results -> LPAR RESULT list(val_type) RPAR . call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2558.
##
## call_instr_results -> LPAR RESULT . list(val_type) RPAR call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2573.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2572.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2571.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 2568.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2556.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2555.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2554.
##
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2553.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ELSE ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ELSE ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT SELECT XOR
##
## Ends in an error in state: 1661.
##
## call_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT UNREACHABLE XOR
##
## Ends in an error in state: 2592.
##
## instr_list -> CALL_INDIRECT call_instr_params_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF CALL_INDIRECT XOR
##
## Ends in an error in state: 1660.
##
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . ID call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . call_instr_params [ END ELSE ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT . ID call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ELSE ]
## instr_list -> CALL_INDIRECT . call_instr_params_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF DATA DOT DROP XOR
##
## Ends in an error in state: 1657.
##
## plain_instr -> DATA DOT DROP . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT DROP . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF DATA DOT XOR
##
## Ends in an error in state: 1656.
##
## plain_instr -> DATA DOT . DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT . DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF DATA XOR
##
## Ends in an error in state: 1655.
##
## plain_instr -> DATA . DOT DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA . DOT DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF ELEM DOT DROP XOR
##
## Ends in an error in state: 1651.
##
## plain_instr -> ELEM DOT DROP . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT DROP . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF ELEM DOT XOR
##
## Ends in an error in state: 1650.
##
## plain_instr -> ELEM DOT . DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT . DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF ELEM XOR
##
## Ends in an error in state: 1649.
##
## plain_instr -> ELEM . DOT DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM . DOT DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF ELSE END XOR
##
## Ends in an error in state: 2867.
##
## instr_list -> IF block_param_body ELSE instr_list END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF ELSE XOR
##
## Ends in an error in state: 2865.
##
## instr_list -> IF block_param_body ELSE . instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF END XOR
##
## Ends in an error in state: 2863.
##
## instr_list -> IF block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT CONST XOR
##
## Ends in an error in state: 1644.
##
## plain_instr -> F32 DOT CONST . FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1641.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1638.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1637.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT CONVERT XOR
##
## Ends in an error in state: 1636.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1626.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1625.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1624.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1623.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1622.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT LOAD XOR
##
## Ends in an error in state: 1621.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1611.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1610.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1607.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1606.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1605.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1604.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1603.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT STORE XOR
##
## Ends in an error in state: 1602.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 DOT XOR
##
## Ends in an error in state: 1599.
##
## plain_instr -> F32 DOT . CONST FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F32 XOR
##
## Ends in an error in state: 1598.
##
## plain_instr -> F32 . DOT CONST FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1592.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1589.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1588.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT CONVERT XOR
##
## Ends in an error in state: 1587.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1578.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1577.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1576.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1575.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1574.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT LOAD XOR
##
## Ends in an error in state: 1573.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1562.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 1561.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1558.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1557.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1556.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1555.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1554.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT STORE XOR
##
## Ends in an error in state: 1553.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 DOT XOR
##
## Ends in an error in state: 1550.
##
## plain_instr -> F64 DOT . ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF F64 XOR
##
## Ends in an error in state: 1549.
##
## plain_instr -> F64 . DOT ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF GLOBAL DOT GET XOR
##
## Ends in an error in state: 1546.
##
## plain_instr -> GLOBAL DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF GLOBAL DOT SET XOR
##
## Ends in an error in state: 1543.
##
## plain_instr -> GLOBAL DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF GLOBAL DOT XOR
##
## Ends in an error in state: 1542.
##
## plain_instr -> GLOBAL DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF GLOBAL XOR
##
## Ends in an error in state: 1541.
##
## plain_instr -> GLOBAL . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT CONST XOR
##
## Ends in an error in state: 1536.
##
## plain_instr -> I32 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT DIV XOR
##
## Ends in an error in state: 1532.
##
## plain_instr -> I32 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 1528.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 1526.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT GE XOR
##
## Ends in an error in state: 1523.
##
## plain_instr -> I32 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT GT XOR
##
## Ends in an error in state: 1520.
##
## plain_instr -> I32 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LE XOR
##
## Ends in an error in state: 1517.
##
## plain_instr -> I32 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1515.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1514.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1513.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1512.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1511.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD XOR
##
## Ends in an error in state: 1510.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1508.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1507.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1506.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1505.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1504.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1503.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1501.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1500.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1499.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1498.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1497.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1496.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD16 XOR
##
## Ends in an error in state: 1495.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1493.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1492.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1491.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1490.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1489.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1488.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1486.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1485.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1484.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1483.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1482.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1481.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LOAD8 XOR
##
## Ends in an error in state: 1480.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT LT XOR
##
## Ends in an error in state: 1477.
##
## plain_instr -> I32 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1470.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1469.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT REM XOR
##
## Ends in an error in state: 1466.
##
## plain_instr -> I32 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT SHR XOR
##
## Ends in an error in state: 1460.
##
## plain_instr -> I32 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1458.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1457.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1456.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1455.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1454.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE XOR
##
## Ends in an error in state: 1453.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1451.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1450.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1449.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1448.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1447.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE16 XOR
##
## Ends in an error in state: 1446.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1444.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1443.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1442.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1441.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1440.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT STORE8 XOR
##
## Ends in an error in state: 1439.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1435.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1432.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1429.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1426.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 1425.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 1424.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 1423.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT TRUNC XOR
##
## Ends in an error in state: 1422.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 DOT UNSIGNED
##
## Ends in an error in state: 1419.
##
## plain_instr -> I32 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . WRAPI64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I32 XOR
##
## Ends in an error in state: 1418.
##
## plain_instr -> I32 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT WRAPI64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT CONST XOR
##
## Ends in an error in state: 1413.
##
## plain_instr -> I64 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT DIV XOR
##
## Ends in an error in state: 1409.
##
## plain_instr -> I64 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 1405.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 1403.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 1401.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 1398.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT GE XOR
##
## Ends in an error in state: 1395.
##
## plain_instr -> I64 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT GT XOR
##
## Ends in an error in state: 1392.
##
## plain_instr -> I64 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LE XOR
##
## Ends in an error in state: 1389.
##
## plain_instr -> I64 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1387.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1386.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1385.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1384.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1383.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD XOR
##
## Ends in an error in state: 1382.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1380.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1379.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1378.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1377.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1376.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1375.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1373.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1372.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1371.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1370.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1369.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1368.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD16 XOR
##
## Ends in an error in state: 1367.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1365.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1364.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1363.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1362.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 1361.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 1360.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1358.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1357.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1356.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1355.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1354.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 1353.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD32 XOR
##
## Ends in an error in state: 1352.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1350.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1349.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1348.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1347.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1346.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1345.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1343.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1342.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1341.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1340.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1339.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1338.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LOAD8 XOR
##
## Ends in an error in state: 1337.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT LT XOR
##
## Ends in an error in state: 1334.
##
## plain_instr -> I64 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1327.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 1326.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT REM XOR
##
## Ends in an error in state: 1323.
##
## plain_instr -> I64 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT SHR XOR
##
## Ends in an error in state: 1317.
##
## plain_instr -> I64 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1315.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1314.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1313.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1312.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1311.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE XOR
##
## Ends in an error in state: 1310.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1308.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1307.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1306.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1305.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1304.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE16 XOR
##
## Ends in an error in state: 1303.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1301.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1300.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1299.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 1298.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 1297.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE32 XOR
##
## Ends in an error in state: 1296.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1294.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1293.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1292.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1291.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1290.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT STORE8 XOR
##
## Ends in an error in state: 1289.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1285.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1282.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1279.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1276.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 1275.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 1274.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 1273.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT TRUNC XOR
##
## Ends in an error in state: 1272.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 DOT WRAPI64
##
## Ends in an error in state: 1270.
##
## plain_instr -> I64 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF I64 XOR
##
## Ends in an error in state: 1269.
##
## plain_instr -> I64 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF ELSE END XOR
##
## Ends in an error in state: 2616.
##
## instr_list -> IF block_param_body ELSE instr_list END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF ELSE XOR
##
## Ends in an error in state: 2614.
##
## instr_list -> IF block_param_body ELSE . instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF END XOR
##
## Ends in an error in state: 2612.
##
## instr_list -> IF block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE ID RPAR ELSE END XOR
##
## Ends in an error in state: 2609.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2607.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2605.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2603.
##
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2602.
##
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE NUM RPAR ELSE END XOR
##
## Ends in an error in state: 2600.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2598.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 2596.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1268.
##
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 1267.
##
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR TYPE XOR
##
## Ends in an error in state: 1266.
##
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF LPAR XOR
##
## Ends in an error in state: 1265.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF IF XOR
##
## Ends in an error in state: 1264.
##
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> IF . block_param_body END instr_list [ END ELSE ]
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ END ELSE ]
## instr_list -> IF . block_param_body ELSE instr_list END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOCAL DOT GET XOR
##
## Ends in an error in state: 1261.
##
## plain_instr -> LOCAL DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOCAL DOT SET XOR
##
## Ends in an error in state: 1258.
##
## plain_instr -> LOCAL DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOCAL DOT TEE XOR
##
## Ends in an error in state: 1255.
##
## plain_instr -> LOCAL DOT TEE . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT TEE . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOCAL DOT XOR
##
## Ends in an error in state: 1254.
##
## plain_instr -> LOCAL DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOCAL XOR
##
## Ends in an error in state: 1253.
##
## plain_instr -> LOCAL . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP END XOR
##
## Ends in an error in state: 2844.
##
## instr_list -> LOOP block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2841.
##
## instr_list -> LOOP LPAR TYPE ID RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2839.
##
## instr_list -> LOOP LPAR TYPE ID RPAR . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2838.
##
## instr_list -> LOOP LPAR TYPE ID . RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 2836.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 799.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 798.
##
## instr_list -> LOOP LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR TYPE XOR
##
## Ends in an error in state: 797.
##
## instr_list -> LOOP LPAR TYPE . ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> LOOP LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP LPAR XOR
##
## Ends in an error in state: 796.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> LOOP LPAR . TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> LOOP LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LOOP XOR
##
## Ends in an error in state: 795.
##
## instr_list -> LOOP . LPAR TYPE ID RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> LOOP . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ELSE ]
## instr_list -> LOOP . block_param_body END instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2392.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2391.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2388.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2387.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2386.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 2385.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR BLOCK XOR
##
## Ends in an error in state: 2384.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2377.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2376.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2373.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2372.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2371.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2370.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2369.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2366.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2365.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2362.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2361.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2360.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2359.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 2358.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2356.
##
## expr -> LPAR IF if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1698.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1697.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1696.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1694.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1693.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 1692.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 1691.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF LPAR XOR
##
## Ends in an error in state: 1690.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR IF XOR
##
## Ends in an error in state: 1689.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2872.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2871.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 778.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 777.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 776.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP LPAR XOR
##
## Ends in an error in state: 775.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR LOOP XOR
##
## Ends in an error in state: 774.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 769.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2429.
##
## block_param_body -> LPAR PARAM list(val_type) RPAR . block_param_body [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR PARAM XOR
##
## Ends in an error in state: 2427.
##
## block_param_body -> LPAR PARAM . list(val_type) RPAR block_param_body [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 773.
##
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR RESULT RPAR XOR
##
## Ends in an error in state: 772.
##
## block_result_body -> LPAR RESULT list(val_type) RPAR . block_result_body [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR RESULT XOR
##
## Ends in an error in state: 770.
##
## block_result_body -> LPAR RESULT . list(val_type) RPAR block_result_body [ END ELSE ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 2402.
##
## instr_list -> expr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR SELECT XOR
##
## Ends in an error in state: 360.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE ID RPAR ELSE END XOR
##
## Ends in an error in state: 2860.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2858.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2856.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2854.
##
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2853.
##
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE NUM RPAR ELSE END XOR
##
## Ends in an error in state: 2851.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2849.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 2847.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 794.
##
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 793.
##
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR TYPE XOR
##
## Ends in an error in state: 792.
##
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR UNREACHABLE XOR
##
## Ends in an error in state: 2397.
##
## expr -> LPAR plain_instr . expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF LPAR XOR
##
## Ends in an error in state: 791.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF MEMORY DOT INIT XOR
##
## Ends in an error in state: 353.
##
## plain_instr -> MEMORY DOT INIT . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT INIT . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF MEMORY DOT XOR
##
## Ends in an error in state: 351.
##
## plain_instr -> MEMORY DOT . SIZE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . GROW [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . FILL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . COPY [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF MEMORY XOR
##
## Ends in an error in state: 350.
##
## plain_instr -> MEMORY . DOT SIZE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT GROW [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT FILL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT COPY [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF REF DOT NULL XOR
##
## Ends in an error in state: 345.
##
## plain_instr -> REF DOT NULL . FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT NULL . EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF REF DOT XOR
##
## Ends in an error in state: 344.
##
## plain_instr -> REF DOT . NULL FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . NULL EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . IS_NULL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF REF FUNC XOR
##
## Ends in an error in state: 341.
##
## plain_instr -> REF FUNC . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF FUNC . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF REF XOR
##
## Ends in an error in state: 340.
##
## plain_instr -> REF . DOT NULL FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT NULL EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT IS_NULL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2545.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2544.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2541.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2540.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2539.
##
## select_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK LPAR XOR
##
## Ends in an error in state: 2538.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT BLOCK XOR
##
## Ends in an error in state: 2537.
##
## select_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2533.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2532.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2530.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2529.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2528.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2527.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2526.
##
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2441.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2508.
##
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2506.
##
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2445.
##
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2444.
##
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2442.
##
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2524.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2523.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2440.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2439.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2438.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2437.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2436.
##
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF ELSE XOR
##
## Ends in an error in state: 2433.
##
## select_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2424.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2421.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2420.
##
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2417.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1666.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 1665.
##
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR TYPE XOR
##
## Ends in an error in state: 1664.
##
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF LPAR XOR
##
## Ends in an error in state: 1663.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT IF XOR
##
## Ends in an error in state: 1662.
##
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3057.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3056.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 370.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 369.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 368.
##
## select_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP LPAR XOR
##
## Ends in an error in state: 367.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LOOP XOR
##
## Ends in an error in state: 366.
##
## select_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3067.
##
## select_instr_results -> LPAR RESULT list(val_type) RPAR . select_instr_results [ END ELSE ]
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LPAR RESULT XOR
##
## Ends in an error in state: 3065.
##
## select_instr_results -> LPAR RESULT . list(val_type) RPAR select_instr_results [ END ELSE ]
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT LPAR XOR
##
## Ends in an error in state: 3064.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results -> LPAR . RESULT list(val_type) RPAR select_instr_results [ END ELSE ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 365.
##
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT SELECT LPAR RESULT XOR
##
## Ends in an error in state: 363.
##
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT SELECT LPAR XOR
##
## Ends in an error in state: 359.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT SELECT XOR
##
## Ends in an error in state: 338.
##
## select_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT UNREACHABLE XOR
##
## Ends in an error in state: 3069.
##
## instr_list -> SELECT select_instr_results_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## SELECT select_instr_results_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF SELECT XOR
##
## Ends in an error in state: 337.
##
## instr_list -> SELECT . select_instr_results [ END ELSE ]
## instr_list -> SELECT . select_instr_results_instr instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT COPY ID XOR
##
## Ends in an error in state: 334.
##
## plain_instr -> TABLE DOT COPY ID . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY ID . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT COPY NUM XOR
##
## Ends in an error in state: 331.
##
## plain_instr -> TABLE DOT COPY NUM . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY NUM . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT COPY XOR
##
## Ends in an error in state: 330.
##
## plain_instr -> TABLE DOT COPY . ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT FILL XOR
##
## Ends in an error in state: 327.
##
## plain_instr -> TABLE DOT FILL . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT FILL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT GET XOR
##
## Ends in an error in state: 324.
##
## plain_instr -> TABLE DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT GROW XOR
##
## Ends in an error in state: 321.
##
## plain_instr -> TABLE DOT GROW . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GROW . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT INIT ID XOR
##
## Ends in an error in state: 318.
##
## plain_instr -> TABLE DOT INIT ID . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT ID . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT INIT NUM XOR
##
## Ends in an error in state: 315.
##
## plain_instr -> TABLE DOT INIT NUM . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT NUM . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT INIT XOR
##
## Ends in an error in state: 314.
##
## plain_instr -> TABLE DOT INIT . ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT SET XOR
##
## Ends in an error in state: 311.
##
## plain_instr -> TABLE DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT SIZE XOR
##
## Ends in an error in state: 308.
##
## plain_instr -> TABLE DOT SIZE . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SIZE . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE DOT XOR
##
## Ends in an error in state: 307.
##
## plain_instr -> TABLE DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF TABLE XOR
##
## Ends in an error in state: 306.
##
## plain_instr -> TABLE . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF UNREACHABLE LPAR XOR
##
## Ends in an error in state: 1688.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF UNREACHABLE XOR
##
## Ends in an error in state: 2400.
##
## instr_list -> plain_instr . instr_list [ END ELSE ]
##
## The known suffix of the stack is as follows:
## plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC IF XOR
##
## Ends in an error in state: 790.
##
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> IF . block_param_body END instr_list [ RPAR ]
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ RPAR ]
## instr_list -> IF . block_param_body ELSE instr_list END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOCAL DOT GET XOR
##
## Ends in an error in state: 787.
##
## plain_instr -> LOCAL DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOCAL DOT SET XOR
##
## Ends in an error in state: 784.
##
## plain_instr -> LOCAL DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOCAL DOT TEE XOR
##
## Ends in an error in state: 781.
##
## plain_instr -> LOCAL DOT TEE . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT TEE . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOCAL DOT XOR
##
## Ends in an error in state: 780.
##
## plain_instr -> LOCAL DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOCAL XOR
##
## Ends in an error in state: 779.
##
## plain_instr -> LOCAL . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK END XOR
##
## Ends in an error in state: 2833.
##
## instr_list -> BLOCK block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 2830.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2828.
##
## instr_list -> BLOCK LPAR TYPE ID RPAR . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2827.
##
## instr_list -> BLOCK LPAR TYPE ID . RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 2825.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 814.
##
## instr_list -> BLOCK LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 813.
##
## instr_list -> BLOCK LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 812.
##
## instr_list -> BLOCK LPAR TYPE . ID RPAR block_param_body END instr_list [ END ]
## instr_list -> BLOCK LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK LPAR XOR
##
## Ends in an error in state: 811.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> BLOCK LPAR . TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> BLOCK LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BLOCK XOR
##
## Ends in an error in state: 810.
##
## instr_list -> BLOCK . LPAR TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> BLOCK . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ]
## instr_list -> BLOCK . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BR XOR
##
## Ends in an error in state: 807.
##
## plain_instr -> BR . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BR . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP BRIF XOR
##
## Ends in an error in state: 804.
##
## plain_instr -> BRIF . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> BRIF . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL XOR
##
## Ends in an error in state: 800.
##
## plain_instr -> CALL . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> CALL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2953.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2952.
##
## call_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2949.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2948.
##
## call_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2947.
##
## call_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK LPAR XOR
##
## Ends in an error in state: 2946.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT BLOCK XOR
##
## Ends in an error in state: 2945.
##
## call_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2976.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2975.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2973.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2972.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2971.
##
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2970.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2969.
##
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2963.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2962.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2944.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2943.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2942.
##
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2941.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2940.
##
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 3045.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3044.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 3043.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 3040.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3039.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 3038.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 3037.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 3036.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID UNREACHABLE XOR
##
## Ends in an error in state: 3048.
##
## instr_list -> CALL_INDIRECT ID call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT ID XOR
##
## Ends in an error in state: 3035.
##
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT ID . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF ELSE XOR
##
## Ends in an error in state: 2937.
##
## call_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2932.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2929.
##
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2928.
##
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2925.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2922.
##
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 2921.
##
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR TYPE XOR
##
## Ends in an error in state: 2920.
##
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF LPAR XOR
##
## Ends in an error in state: 2919.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT IF XOR
##
## Ends in an error in state: 2918.
##
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2913.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2912.
##
## call_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2909.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 2908.
##
## call_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 2907.
##
## call_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP LPAR XOR
##
## Ends in an error in state: 2906.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## call_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LOOP XOR
##
## Ends in an error in state: 2905.
##
## call_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 3016.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 3024.
##
## call_instr_params -> LPAR PARAM list(val_type) RPAR . call_instr_params [ END ]
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 3022.
##
## call_instr_params -> LPAR PARAM . list(val_type) RPAR call_instr_params [ END ]
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 3020.
##
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3019.
##
## call_instr_results -> LPAR RESULT list(val_type) RPAR . call_instr_results [ END ]
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 3017.
##
## call_instr_results -> LPAR RESULT . list(val_type) RPAR call_instr_results [ END ]
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE ID RPAR UNREACHABLE XOR
##
## Ends in an error in state: 3032.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3031.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 3030.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE NUM RPAR UNREACHABLE XOR
##
## Ends in an error in state: 3027.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3015.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3014.
##
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 3013.
##
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 3012.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ END ]
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ END ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT SELECT XOR
##
## Ends in an error in state: 763.
##
## call_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT UNREACHABLE XOR
##
## Ends in an error in state: 3051.
##
## instr_list -> CALL_INDIRECT call_instr_params_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT call_instr_params_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP CALL_INDIRECT XOR
##
## Ends in an error in state: 762.
##
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . ID call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . call_instr_params [ END ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT . ID call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr instr_list [ END ]
## instr_list -> CALL_INDIRECT . call_instr_params_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP DATA DOT DROP XOR
##
## Ends in an error in state: 759.
##
## plain_instr -> DATA DOT DROP . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT DROP . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP DATA DOT XOR
##
## Ends in an error in state: 758.
##
## plain_instr -> DATA DOT . DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA DOT . DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP DATA XOR
##
## Ends in an error in state: 757.
##
## plain_instr -> DATA . DOT DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> DATA . DOT DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP ELEM DOT DROP XOR
##
## Ends in an error in state: 753.
##
## plain_instr -> ELEM DOT DROP . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT DROP . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP ELEM DOT XOR
##
## Ends in an error in state: 752.
##
## plain_instr -> ELEM DOT . DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM DOT . DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP ELEM XOR
##
## Ends in an error in state: 751.
##
## plain_instr -> ELEM . DOT DROP ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> ELEM . DOT DROP NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP END XOR
##
## Ends in an error in state: 3119.
##
## instr_list -> LOOP block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT CONST XOR
##
## Ends in an error in state: 746.
##
## plain_instr -> F32 DOT CONST . FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 743.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 740.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 739.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT CONVERT XOR
##
## Ends in an error in state: 738.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 728.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 727.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 726.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 725.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 724.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT LOAD XOR
##
## Ends in an error in state: 723.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 713.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 712.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 709.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 708.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 707.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 706.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 705.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT STORE XOR
##
## Ends in an error in state: 704.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 DOT XOR
##
## Ends in an error in state: 701.
##
## plain_instr -> F32 DOT . CONST FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F32 XOR
##
## Ends in an error in state: 700.
##
## plain_instr -> F32 . DOT CONST FLOAT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 694.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 691.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 690.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT CONVERT XOR
##
## Ends in an error in state: 689.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 680.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 679.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 678.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 677.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 676.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT LOAD XOR
##
## Ends in an error in state: 675.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 664.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 663.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 660.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 659.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 658.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 657.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 656.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT STORE XOR
##
## Ends in an error in state: 655.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 DOT XOR
##
## Ends in an error in state: 652.
##
## plain_instr -> F64 DOT . ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP F64 XOR
##
## Ends in an error in state: 651.
##
## plain_instr -> F64 . DOT ABS [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEG [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SQRT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CEIL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT FLOOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT TRUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NEAREST [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT DIV [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MIN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT MAX [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT GE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP GLOBAL DOT GET XOR
##
## Ends in an error in state: 648.
##
## plain_instr -> GLOBAL DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP GLOBAL DOT SET XOR
##
## Ends in an error in state: 645.
##
## plain_instr -> GLOBAL DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP GLOBAL DOT XOR
##
## Ends in an error in state: 644.
##
## plain_instr -> GLOBAL DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP GLOBAL XOR
##
## Ends in an error in state: 643.
##
## plain_instr -> GLOBAL . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> GLOBAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT CONST XOR
##
## Ends in an error in state: 638.
##
## plain_instr -> I32 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT DIV XOR
##
## Ends in an error in state: 634.
##
## plain_instr -> I32 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 630.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 628.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT GE XOR
##
## Ends in an error in state: 625.
##
## plain_instr -> I32 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT GT XOR
##
## Ends in an error in state: 622.
##
## plain_instr -> I32 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LE XOR
##
## Ends in an error in state: 619.
##
## plain_instr -> I32 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 617.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 616.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 615.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 614.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 613.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD XOR
##
## Ends in an error in state: 612.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 610.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 609.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 608.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 607.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 606.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 605.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 603.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 602.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 601.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 600.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 599.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 598.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD16 XOR
##
## Ends in an error in state: 597.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 595.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 594.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 593.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 592.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 591.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 590.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 588.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 587.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 586.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 585.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 584.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 583.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LOAD8 XOR
##
## Ends in an error in state: 582.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT LT XOR
##
## Ends in an error in state: 579.
##
## plain_instr -> I32 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 572.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 571.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT REM XOR
##
## Ends in an error in state: 568.
##
## plain_instr -> I32 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT SHR XOR
##
## Ends in an error in state: 562.
##
## plain_instr -> I32 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 560.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 559.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 558.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 557.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 556.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE XOR
##
## Ends in an error in state: 555.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 553.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 552.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 551.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 550.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 549.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE16 XOR
##
## Ends in an error in state: 548.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 546.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 545.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 544.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 543.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 542.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT STORE8 XOR
##
## Ends in an error in state: 541.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 537.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 534.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 531.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 528.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 527.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 526.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 525.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT TRUNC XOR
##
## Ends in an error in state: 524.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 DOT UNSIGNED
##
## Ends in an error in state: 521.
##
## plain_instr -> I32 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . WRAPI64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I32 XOR
##
## Ends in an error in state: 520.
##
## plain_instr -> I32 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT WRAPI64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT CONST XOR
##
## Ends in an error in state: 515.
##
## plain_instr -> I64 DOT CONST . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT DIV XOR
##
## Ends in an error in state: 511.
##
## plain_instr -> I64 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 507.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 505.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 503.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 500.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT GE XOR
##
## Ends in an error in state: 497.
##
## plain_instr -> I64 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT GT XOR
##
## Ends in an error in state: 494.
##
## plain_instr -> I64 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LE XOR
##
## Ends in an error in state: 491.
##
## plain_instr -> I64 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 489.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 488.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 487.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 486.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 485.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD XOR
##
## Ends in an error in state: 484.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 482.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 481.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 480.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 479.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 478.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 477.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 475.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 474.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 473.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 472.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 471.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 470.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD16 XOR
##
## Ends in an error in state: 469.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 467.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 466.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 465.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 464.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 463.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 462.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 460.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 459.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 458.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 457.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 456.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 455.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD32 XOR
##
## Ends in an error in state: 454.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 452.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 451.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 450.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 449.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 448.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 447.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 445.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 444.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 443.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 442.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 441.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 440.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LOAD8 XOR
##
## Ends in an error in state: 439.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT LT XOR
##
## Ends in an error in state: 436.
##
## plain_instr -> I64 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 429.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 428.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT REM XOR
##
## Ends in an error in state: 425.
##
## plain_instr -> I64 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT SHR XOR
##
## Ends in an error in state: 419.
##
## plain_instr -> I64 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 417.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 416.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 415.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 414.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 413.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE XOR
##
## Ends in an error in state: 412.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 410.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 409.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 408.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 407.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 406.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE16 XOR
##
## Ends in an error in state: 405.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 403.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 402.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 401.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 400.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 399.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE32 XOR
##
## Ends in an error in state: 398.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 396.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 395.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 394.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 393.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 392.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT STORE8 XOR
##
## Ends in an error in state: 391.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 387.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 384.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 381.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 378.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 377.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 376.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 375.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT TRUNC XOR
##
## Ends in an error in state: 374.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 DOT WRAPI64
##
## Ends in an error in state: 372.
##
## plain_instr -> I64 DOT . CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP I64 XOR
##
## Ends in an error in state: 371.
##
## plain_instr -> I64 . DOT CONST NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CLZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT CTZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT POPCNT [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ADD [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SUB [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT MUL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT AND [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT OR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT XOR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT ROTR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQZ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EQ [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT NE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF ELSE END XOR
##
## Ends in an error in state: 3097.
##
## instr_list -> IF block_param_body ELSE instr_list END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF ELSE XOR
##
## Ends in an error in state: 3095.
##
## instr_list -> IF block_param_body ELSE . instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF END XOR
##
## Ends in an error in state: 3093.
##
## instr_list -> IF block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE ID RPAR ELSE END XOR
##
## Ends in an error in state: 3090.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 3088.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 3086.
##
## instr_list -> IF LPAR TYPE ID RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3084.
##
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE ID XOR
##
## Ends in an error in state: 3083.
##
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE NUM RPAR ELSE END XOR
##
## Ends in an error in state: 3081.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE instr_list END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 3079.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 3077.
##
## instr_list -> IF LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3075.
##
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 3074.
##
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR TYPE XOR
##
## Ends in an error in state: 3073.
##
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END instr_list [ END ]
## instr_list -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF LPAR XOR
##
## Ends in an error in state: 3072.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ]
## instr_list -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ END ]
## instr_list -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP IF XOR
##
## Ends in an error in state: 304.
##
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ]
## instr_list -> IF . block_param_body END instr_list [ END ]
## instr_list -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END instr_list [ END ]
## instr_list -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END instr_list [ END ]
## instr_list -> IF . block_param_body ELSE instr_list END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOCAL DOT GET XOR
##
## Ends in an error in state: 301.
##
## plain_instr -> LOCAL DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOCAL DOT SET XOR
##
## Ends in an error in state: 298.
##
## plain_instr -> LOCAL DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOCAL DOT TEE XOR
##
## Ends in an error in state: 295.
##
## plain_instr -> LOCAL DOT TEE . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT TEE . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOCAL DOT XOR
##
## Ends in an error in state: 294.
##
## plain_instr -> LOCAL DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL DOT . TEE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOCAL XOR
##
## Ends in an error in state: 293.
##
## plain_instr -> LOCAL . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> LOCAL . DOT TEE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP END XOR
##
## Ends in an error in state: 3108.
##
## instr_list -> LOOP block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 3105.
##
## instr_list -> LOOP LPAR TYPE ID RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3103.
##
## instr_list -> LOOP LPAR TYPE ID RPAR . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3102.
##
## instr_list -> LOOP LPAR TYPE ID . RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 3100.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR block_param_body END . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 292.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 291.
##
## instr_list -> LOOP LPAR TYPE NUM . RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR TYPE XOR
##
## Ends in an error in state: 290.
##
## instr_list -> LOOP LPAR TYPE . ID RPAR block_param_body END instr_list [ END ]
## instr_list -> LOOP LPAR TYPE . NUM RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP LPAR XOR
##
## Ends in an error in state: 289.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> LOOP LPAR . TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> LOOP LPAR . TYPE NUM RPAR block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LOOP XOR
##
## Ends in an error in state: 288.
##
## instr_list -> LOOP . LPAR TYPE ID RPAR block_param_body END instr_list [ END ]
## instr_list -> LOOP . LPAR TYPE NUM RPAR block_param_body END instr_list [ END ]
## instr_list -> LOOP . block_param_body END instr_list [ END ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1683.
##
## instr_list -> expr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE ID RPAR END XOR
##
## Ends in an error in state: 3116.
##
## instr_list -> LOOP LPAR TYPE ID RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3114.
##
## instr_list -> LOOP LPAR TYPE ID RPAR . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3113.
##
## instr_list -> LOOP LPAR TYPE ID . RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE NUM RPAR END XOR
##
## Ends in an error in state: 3111.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR block_param_body END . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR block_param_body END
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 287.
##
## instr_list -> LOOP LPAR TYPE NUM RPAR . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 286.
##
## instr_list -> LOOP LPAR TYPE NUM . RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR TYPE XOR
##
## Ends in an error in state: 285.
##
## instr_list -> LOOP LPAR TYPE . ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> LOOP LPAR TYPE . NUM RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP LPAR XOR
##
## Ends in an error in state: 284.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## instr_list -> LOOP LPAR . TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> LOOP LPAR . TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP MEMORY DOT INIT XOR
##
## Ends in an error in state: 245.
##
## plain_instr -> MEMORY DOT INIT . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT INIT . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP MEMORY DOT XOR
##
## Ends in an error in state: 243.
##
## plain_instr -> MEMORY DOT . SIZE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . GROW [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . FILL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . COPY [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP MEMORY XOR
##
## Ends in an error in state: 242.
##
## plain_instr -> MEMORY . DOT SIZE [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT GROW [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT FILL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT COPY [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP REF DOT NULL XOR
##
## Ends in an error in state: 237.
##
## plain_instr -> REF DOT NULL . FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT NULL . EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP REF DOT XOR
##
## Ends in an error in state: 236.
##
## plain_instr -> REF DOT . NULL FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . NULL EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . IS_NULL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP REF FUNC XOR
##
## Ends in an error in state: 233.
##
## plain_instr -> REF FUNC . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF FUNC . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP REF XOR
##
## Ends in an error in state: 232.
##
## plain_instr -> REF . DOT NULL FUNC [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT NULL EXTERN [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT IS_NULL [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3004.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 3003.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3000.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2999.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2998.
##
## select_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK LPAR XOR
##
## Ends in an error in state: 2997.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT BLOCK XOR
##
## Ends in an error in state: 2996.
##
## select_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2992.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2991.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2989.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2988.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2987.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2986.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2985.
##
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2900.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2967.
##
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2965.
##
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2904.
##
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2903.
##
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2901.
##
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2983.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2982.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2899.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2898.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2897.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2896.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2895.
##
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF ELSE XOR
##
## Ends in an error in state: 2892.
##
## select_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2887.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2884.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2883.
##
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2880.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 768.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 767.
##
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR TYPE XOR
##
## Ends in an error in state: 766.
##
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF LPAR XOR
##
## Ends in an error in state: 765.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT IF XOR
##
## Ends in an error in state: 764.
##
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3142.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3141.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 262.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 261.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 260.
##
## select_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP LPAR XOR
##
## Ends in an error in state: 259.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LOOP XOR
##
## Ends in an error in state: 258.
##
## select_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3152.
##
## select_instr_results -> LPAR RESULT list(val_type) RPAR . select_instr_results [ END ]
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LPAR RESULT XOR
##
## Ends in an error in state: 3150.
##
## select_instr_results -> LPAR RESULT . list(val_type) RPAR select_instr_results [ END ]
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT LPAR XOR
##
## Ends in an error in state: 3149.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results -> LPAR . RESULT list(val_type) RPAR select_instr_results [ END ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 257.
##
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT SELECT LPAR RESULT XOR
##
## Ends in an error in state: 255.
##
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT SELECT LPAR XOR
##
## Ends in an error in state: 251.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT SELECT XOR
##
## Ends in an error in state: 230.
##
## select_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT UNREACHABLE XOR
##
## Ends in an error in state: 3154.
##
## instr_list -> SELECT select_instr_results_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## SELECT select_instr_results_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP SELECT XOR
##
## Ends in an error in state: 229.
##
## instr_list -> SELECT . select_instr_results [ END ]
## instr_list -> SELECT . select_instr_results_instr instr_list [ END ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT COPY ID XOR
##
## Ends in an error in state: 226.
##
## plain_instr -> TABLE DOT COPY ID . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY ID . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT COPY NUM XOR
##
## Ends in an error in state: 223.
##
## plain_instr -> TABLE DOT COPY NUM . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY NUM . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT COPY XOR
##
## Ends in an error in state: 222.
##
## plain_instr -> TABLE DOT COPY . ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT FILL XOR
##
## Ends in an error in state: 219.
##
## plain_instr -> TABLE DOT FILL . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT FILL . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT GET XOR
##
## Ends in an error in state: 216.
##
## plain_instr -> TABLE DOT GET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT GROW XOR
##
## Ends in an error in state: 213.
##
## plain_instr -> TABLE DOT GROW . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GROW . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT INIT ID XOR
##
## Ends in an error in state: 210.
##
## plain_instr -> TABLE DOT INIT ID . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT ID . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT INIT NUM XOR
##
## Ends in an error in state: 207.
##
## plain_instr -> TABLE DOT INIT NUM . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT NUM . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT INIT XOR
##
## Ends in an error in state: 206.
##
## plain_instr -> TABLE DOT INIT . ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT SET XOR
##
## Ends in an error in state: 203.
##
## plain_instr -> TABLE DOT SET . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SET . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT SIZE XOR
##
## Ends in an error in state: 200.
##
## plain_instr -> TABLE DOT SIZE . ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SIZE . NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE DOT XOR
##
## Ends in an error in state: 199.
##
## plain_instr -> TABLE DOT . GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP TABLE XOR
##
## Ends in an error in state: 198.
##
## plain_instr -> TABLE . DOT GET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM ID [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM NUM [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP UNREACHABLE LPAR XOR
##
## Ends in an error in state: 816.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP UNREACHABLE XOR
##
## Ends in an error in state: 815.
##
## instr_list -> plain_instr . instr_list [ END ]
##
## The known suffix of the stack is as follows:
## plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LOOP XOR
##
## Ends in an error in state: 283.
##
## instr_list -> LOOP . LPAR TYPE ID RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> LOOP . LPAR TYPE NUM RPAR block_param_body END instr_list [ RPAR ]
## instr_list -> LOOP . block_param_body END instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2259.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2258.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2255.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2254.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2253.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 2252.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BLOCK XOR
##
## Ends in an error in state: 2251.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BR XOR
##
## Ends in an error in state: 2138.
##
## plain_instr -> BR . ID [ RPAR LPAR ]
## plain_instr -> BR . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR BRIF XOR
##
## Ends in an error in state: 2135.
##
## plain_instr -> BRIF . ID [ RPAR LPAR ]
## plain_instr -> BRIF . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL XOR
##
## Ends in an error in state: 2131.
##
## plain_instr -> CALL . ID [ RPAR LPAR ]
## plain_instr -> CALL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2244.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2243.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2240.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2239.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2238.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2237.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2236.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2115.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2192.
##
## call_expr_params -> LPAR PARAM list(val_type) RPAR . call_expr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2190.
##
## call_expr_params -> LPAR PARAM . list(val_type) RPAR call_expr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2119.
##
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2118.
##
## call_expr_results -> LPAR RESULT list(val_type) RPAR . call_expr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2116.
##
## call_expr_results -> LPAR RESULT . list(val_type) RPAR call_expr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2230.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2229.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2226.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2225.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2224.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2223.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 2222.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR DATA DOT DROP XOR
##
## Ends in an error in state: 2107.
##
## plain_instr -> DATA DOT DROP . ID [ RPAR LPAR ]
## plain_instr -> DATA DOT DROP . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR DATA DOT XOR
##
## Ends in an error in state: 2106.
##
## plain_instr -> DATA DOT . DROP ID [ RPAR LPAR ]
## plain_instr -> DATA DOT . DROP NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR DATA XOR
##
## Ends in an error in state: 2105.
##
## plain_instr -> DATA . DOT DROP ID [ RPAR LPAR ]
## plain_instr -> DATA . DOT DROP NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR ELEM DOT DROP XOR
##
## Ends in an error in state: 2101.
##
## plain_instr -> ELEM DOT DROP . ID [ RPAR LPAR ]
## plain_instr -> ELEM DOT DROP . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR ELEM DOT XOR
##
## Ends in an error in state: 2100.
##
## plain_instr -> ELEM DOT . DROP ID [ RPAR LPAR ]
## plain_instr -> ELEM DOT . DROP NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR ELEM XOR
##
## Ends in an error in state: 2099.
##
## plain_instr -> ELEM . DOT DROP ID [ RPAR LPAR ]
## plain_instr -> ELEM . DOT DROP NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 3440.
##
## func_fields -> LPAR EXPORT NAME RPAR . func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR EXPORT NAME XOR
##
## Ends in an error in state: 3439.
##
## func_fields -> LPAR EXPORT NAME . RPAR func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR EXPORT XOR
##
## Ends in an error in state: 3438.
##
## func_fields -> LPAR EXPORT . NAME RPAR func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT CONST XOR
##
## Ends in an error in state: 2094.
##
## plain_instr -> F32 DOT CONST . FLOAT [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 2091.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 2088.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 2087.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT CONVERT XOR
##
## Ends in an error in state: 2086.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 2076.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 2075.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 2074.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 2073.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 2072.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT LOAD XOR
##
## Ends in an error in state: 2071.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 2061.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 2060.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 2057.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 2056.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 2055.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 2054.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 2053.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT STORE XOR
##
## Ends in an error in state: 2052.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 DOT XOR
##
## Ends in an error in state: 2049.
##
## plain_instr -> F32 DOT . CONST FLOAT [ RPAR LPAR ]
## plain_instr -> F32 DOT . ABS [ RPAR LPAR ]
## plain_instr -> F32 DOT . NEG [ RPAR LPAR ]
## plain_instr -> F32 DOT . SQRT [ RPAR LPAR ]
## plain_instr -> F32 DOT . CEIL [ RPAR LPAR ]
## plain_instr -> F32 DOT . FLOOR [ RPAR LPAR ]
## plain_instr -> F32 DOT . TRUNC [ RPAR LPAR ]
## plain_instr -> F32 DOT . NEAREST [ RPAR LPAR ]
## plain_instr -> F32 DOT . ADD [ RPAR LPAR ]
## plain_instr -> F32 DOT . SUB [ RPAR LPAR ]
## plain_instr -> F32 DOT . MUL [ RPAR LPAR ]
## plain_instr -> F32 DOT . DIV [ RPAR LPAR ]
## plain_instr -> F32 DOT . MIN [ RPAR LPAR ]
## plain_instr -> F32 DOT . MAX [ RPAR LPAR ]
## plain_instr -> F32 DOT . COPYSIGN [ RPAR LPAR ]
## plain_instr -> F32 DOT . EQ [ RPAR LPAR ]
## plain_instr -> F32 DOT . NE [ RPAR LPAR ]
## plain_instr -> F32 DOT . LT [ RPAR LPAR ]
## plain_instr -> F32 DOT . GT [ RPAR LPAR ]
## plain_instr -> F32 DOT . LE [ RPAR LPAR ]
## plain_instr -> F32 DOT . GE [ RPAR LPAR ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F32 XOR
##
## Ends in an error in state: 2048.
##
## plain_instr -> F32 . DOT CONST FLOAT [ RPAR LPAR ]
## plain_instr -> F32 . DOT ABS [ RPAR LPAR ]
## plain_instr -> F32 . DOT NEG [ RPAR LPAR ]
## plain_instr -> F32 . DOT SQRT [ RPAR LPAR ]
## plain_instr -> F32 . DOT CEIL [ RPAR LPAR ]
## plain_instr -> F32 . DOT FLOOR [ RPAR LPAR ]
## plain_instr -> F32 . DOT TRUNC [ RPAR LPAR ]
## plain_instr -> F32 . DOT NEAREST [ RPAR LPAR ]
## plain_instr -> F32 . DOT ADD [ RPAR LPAR ]
## plain_instr -> F32 . DOT SUB [ RPAR LPAR ]
## plain_instr -> F32 . DOT MUL [ RPAR LPAR ]
## plain_instr -> F32 . DOT DIV [ RPAR LPAR ]
## plain_instr -> F32 . DOT MIN [ RPAR LPAR ]
## plain_instr -> F32 . DOT MAX [ RPAR LPAR ]
## plain_instr -> F32 . DOT COPYSIGN [ RPAR LPAR ]
## plain_instr -> F32 . DOT EQ [ RPAR LPAR ]
## plain_instr -> F32 . DOT NE [ RPAR LPAR ]
## plain_instr -> F32 . DOT LT [ RPAR LPAR ]
## plain_instr -> F32 . DOT GT [ RPAR LPAR ]
## plain_instr -> F32 . DOT LE [ RPAR LPAR ]
## plain_instr -> F32 . DOT GE [ RPAR LPAR ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 2042.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 2039.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 2038.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT CONVERT XOR
##
## Ends in an error in state: 2037.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 2028.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 2027.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 2026.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 2025.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 2024.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT LOAD XOR
##
## Ends in an error in state: 2023.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 2012.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 2011.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 2008.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 2007.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 2006.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 2005.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 2004.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT STORE XOR
##
## Ends in an error in state: 2003.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 DOT XOR
##
## Ends in an error in state: 2000.
##
## plain_instr -> F64 DOT . ABS [ RPAR LPAR ]
## plain_instr -> F64 DOT . NEG [ RPAR LPAR ]
## plain_instr -> F64 DOT . SQRT [ RPAR LPAR ]
## plain_instr -> F64 DOT . CEIL [ RPAR LPAR ]
## plain_instr -> F64 DOT . FLOOR [ RPAR LPAR ]
## plain_instr -> F64 DOT . TRUNC [ RPAR LPAR ]
## plain_instr -> F64 DOT . NEAREST [ RPAR LPAR ]
## plain_instr -> F64 DOT . ADD [ RPAR LPAR ]
## plain_instr -> F64 DOT . SUB [ RPAR LPAR ]
## plain_instr -> F64 DOT . MUL [ RPAR LPAR ]
## plain_instr -> F64 DOT . DIV [ RPAR LPAR ]
## plain_instr -> F64 DOT . MIN [ RPAR LPAR ]
## plain_instr -> F64 DOT . MAX [ RPAR LPAR ]
## plain_instr -> F64 DOT . COPYSIGN [ RPAR LPAR ]
## plain_instr -> F64 DOT . EQ [ RPAR LPAR ]
## plain_instr -> F64 DOT . NE [ RPAR LPAR ]
## plain_instr -> F64 DOT . LT [ RPAR LPAR ]
## plain_instr -> F64 DOT . GT [ RPAR LPAR ]
## plain_instr -> F64 DOT . LE [ RPAR LPAR ]
## plain_instr -> F64 DOT . GE [ RPAR LPAR ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR F64 XOR
##
## Ends in an error in state: 1999.
##
## plain_instr -> F64 . DOT ABS [ RPAR LPAR ]
## plain_instr -> F64 . DOT NEG [ RPAR LPAR ]
## plain_instr -> F64 . DOT SQRT [ RPAR LPAR ]
## plain_instr -> F64 . DOT CEIL [ RPAR LPAR ]
## plain_instr -> F64 . DOT FLOOR [ RPAR LPAR ]
## plain_instr -> F64 . DOT TRUNC [ RPAR LPAR ]
## plain_instr -> F64 . DOT NEAREST [ RPAR LPAR ]
## plain_instr -> F64 . DOT ADD [ RPAR LPAR ]
## plain_instr -> F64 . DOT SUB [ RPAR LPAR ]
## plain_instr -> F64 . DOT MUL [ RPAR LPAR ]
## plain_instr -> F64 . DOT DIV [ RPAR LPAR ]
## plain_instr -> F64 . DOT MIN [ RPAR LPAR ]
## plain_instr -> F64 . DOT MAX [ RPAR LPAR ]
## plain_instr -> F64 . DOT COPYSIGN [ RPAR LPAR ]
## plain_instr -> F64 . DOT EQ [ RPAR LPAR ]
## plain_instr -> F64 . DOT NE [ RPAR LPAR ]
## plain_instr -> F64 . DOT LT [ RPAR LPAR ]
## plain_instr -> F64 . DOT GT [ RPAR LPAR ]
## plain_instr -> F64 . DOT LE [ RPAR LPAR ]
## plain_instr -> F64 . DOT GE [ RPAR LPAR ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR GLOBAL DOT GET XOR
##
## Ends in an error in state: 1996.
##
## plain_instr -> GLOBAL DOT GET . ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT GET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR GLOBAL DOT SET XOR
##
## Ends in an error in state: 1993.
##
## plain_instr -> GLOBAL DOT SET . ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT SET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR GLOBAL DOT XOR
##
## Ends in an error in state: 1992.
##
## plain_instr -> GLOBAL DOT . GET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . GET NUM [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . SET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . SET NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR GLOBAL XOR
##
## Ends in an error in state: 1991.
##
## plain_instr -> GLOBAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT GET NUM [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT SET NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT CONST XOR
##
## Ends in an error in state: 1986.
##
## plain_instr -> I32 DOT CONST . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT DIV XOR
##
## Ends in an error in state: 1982.
##
## plain_instr -> I32 DOT DIV . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 1978.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 1976.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT GE XOR
##
## Ends in an error in state: 1973.
##
## plain_instr -> I32 DOT GE . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT GE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT GT XOR
##
## Ends in an error in state: 1970.
##
## plain_instr -> I32 DOT GT . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT GT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LE XOR
##
## Ends in an error in state: 1967.
##
## plain_instr -> I32 DOT LE . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT LE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1965.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1964.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1963.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1962.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1961.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD XOR
##
## Ends in an error in state: 1960.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1958.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1957.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1956.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1955.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1954.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1953.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1951.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1950.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1949.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1948.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1947.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1946.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD16 XOR
##
## Ends in an error in state: 1945.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1943.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1942.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1941.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1940.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1939.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1938.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1936.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1935.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1934.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1933.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1932.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1931.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LOAD8 XOR
##
## Ends in an error in state: 1930.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT LT XOR
##
## Ends in an error in state: 1927.
##
## plain_instr -> I32 DOT LT . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT LT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1920.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1919.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT REM XOR
##
## Ends in an error in state: 1916.
##
## plain_instr -> I32 DOT REM . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT REM . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT SHR XOR
##
## Ends in an error in state: 1910.
##
## plain_instr -> I32 DOT SHR . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1908.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1907.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1906.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1905.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1904.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE XOR
##
## Ends in an error in state: 1903.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1901.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1900.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1899.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1898.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1897.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE16 XOR
##
## Ends in an error in state: 1896.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1894.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1893.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1892.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1891.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1890.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT STORE8 XOR
##
## Ends in an error in state: 1889.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1885.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1882.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1879.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1876.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 1875.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 1874.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 1873.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT TRUNC XOR
##
## Ends in an error in state: 1872.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 DOT UNSIGNED
##
## Ends in an error in state: 1869.
##
## plain_instr -> I32 DOT . CONST NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . CLZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . CTZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . POPCNT [ RPAR LPAR ]
## plain_instr -> I32 DOT . ADD [ RPAR LPAR ]
## plain_instr -> I32 DOT . SUB [ RPAR LPAR ]
## plain_instr -> I32 DOT . MUL [ RPAR LPAR ]
## plain_instr -> I32 DOT . DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REM SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . AND [ RPAR LPAR ]
## plain_instr -> I32 DOT . OR [ RPAR LPAR ]
## plain_instr -> I32 DOT . XOR [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHL [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . ROTL [ RPAR LPAR ]
## plain_instr -> I32 DOT . ROTR [ RPAR LPAR ]
## plain_instr -> I32 DOT . EQZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . EQ [ RPAR LPAR ]
## plain_instr -> I32 DOT . NE [ RPAR LPAR ]
## plain_instr -> I32 DOT . LT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . WRAPI64 [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I32 XOR
##
## Ends in an error in state: 1868.
##
## plain_instr -> I32 . DOT CONST NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT CLZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT CTZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT POPCNT [ RPAR LPAR ]
## plain_instr -> I32 . DOT ADD [ RPAR LPAR ]
## plain_instr -> I32 . DOT SUB [ RPAR LPAR ]
## plain_instr -> I32 . DOT MUL [ RPAR LPAR ]
## plain_instr -> I32 . DOT DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REM SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT AND [ RPAR LPAR ]
## plain_instr -> I32 . DOT OR [ RPAR LPAR ]
## plain_instr -> I32 . DOT XOR [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHL [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT ROTL [ RPAR LPAR ]
## plain_instr -> I32 . DOT ROTR [ RPAR LPAR ]
## plain_instr -> I32 . DOT EQZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT EQ [ RPAR LPAR ]
## plain_instr -> I32 . DOT NE [ RPAR LPAR ]
## plain_instr -> I32 . DOT LT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT WRAPI64 [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT CONST XOR
##
## Ends in an error in state: 1863.
##
## plain_instr -> I64 DOT CONST . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT DIV XOR
##
## Ends in an error in state: 1859.
##
## plain_instr -> I64 DOT DIV . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 1855.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 1853.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 1851.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 1848.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT GE XOR
##
## Ends in an error in state: 1845.
##
## plain_instr -> I64 DOT GE . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT GE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT GT XOR
##
## Ends in an error in state: 1842.
##
## plain_instr -> I64 DOT GT . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT GT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LE XOR
##
## Ends in an error in state: 1839.
##
## plain_instr -> I64 DOT LE . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT LE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1837.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1836.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1835.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1834.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1833.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD XOR
##
## Ends in an error in state: 1832.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1830.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1829.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1828.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1827.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1826.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1825.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1823.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1822.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1821.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1820.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1819.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1818.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD16 XOR
##
## Ends in an error in state: 1817.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1815.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1814.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1813.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1812.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 1811.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 1810.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1808.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1807.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1806.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1805.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1804.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 1803.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD32 XOR
##
## Ends in an error in state: 1802.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1800.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1799.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1798.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1797.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1796.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1795.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1793.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1792.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1791.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1790.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1789.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1788.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LOAD8 XOR
##
## Ends in an error in state: 1787.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT LT XOR
##
## Ends in an error in state: 1784.
##
## plain_instr -> I64 DOT LT . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT LT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1777.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 1776.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT REM XOR
##
## Ends in an error in state: 1773.
##
## plain_instr -> I64 DOT REM . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT REM . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT SHR XOR
##
## Ends in an error in state: 1767.
##
## plain_instr -> I64 DOT SHR . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1765.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1764.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1763.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1762.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1761.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE XOR
##
## Ends in an error in state: 1760.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1758.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1757.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1756.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1755.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1754.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE16 XOR
##
## Ends in an error in state: 1753.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1751.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1750.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1749.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 1748.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 1747.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE32 XOR
##
## Ends in an error in state: 1746.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL XOR
##
## Ends in an error in state: 1744.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL NUM ALIGN XOR
##
## Ends in an error in state: 1743.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM ALIGN . EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL NUM XOR
##
## Ends in an error in state: 1742.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL NUM . ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1741.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1740.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT STORE8 XOR
##
## Ends in an error in state: 1739.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1735.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1732.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1729.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1726.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 1725.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 1724.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 1723.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT TRUNC XOR
##
## Ends in an error in state: 1722.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 DOT WRAPI64
##
## Ends in an error in state: 1720.
##
## plain_instr -> I64 DOT . CONST NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . CLZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . CTZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . POPCNT [ RPAR LPAR ]
## plain_instr -> I64 DOT . ADD [ RPAR LPAR ]
## plain_instr -> I64 DOT . SUB [ RPAR LPAR ]
## plain_instr -> I64 DOT . MUL [ RPAR LPAR ]
## plain_instr -> I64 DOT . DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REM SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . AND [ RPAR LPAR ]
## plain_instr -> I64 DOT . OR [ RPAR LPAR ]
## plain_instr -> I64 DOT . XOR [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHL [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . ROTL [ RPAR LPAR ]
## plain_instr -> I64 DOT . ROTR [ RPAR LPAR ]
## plain_instr -> I64 DOT . EQZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . EQ [ RPAR LPAR ]
## plain_instr -> I64 DOT . NE [ RPAR LPAR ]
## plain_instr -> I64 DOT . LT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR I64 XOR
##
## Ends in an error in state: 1719.
##
## plain_instr -> I64 . DOT CONST NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT CLZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT CTZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT POPCNT [ RPAR LPAR ]
## plain_instr -> I64 . DOT ADD [ RPAR LPAR ]
## plain_instr -> I64 . DOT SUB [ RPAR LPAR ]
## plain_instr -> I64 . DOT MUL [ RPAR LPAR ]
## plain_instr -> I64 . DOT DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REM SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT AND [ RPAR LPAR ]
## plain_instr -> I64 . DOT OR [ RPAR LPAR ]
## plain_instr -> I64 . DOT XOR [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHL [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT ROTL [ RPAR LPAR ]
## plain_instr -> I64 . DOT ROTR [ RPAR LPAR ]
## plain_instr -> I64 . DOT EQZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT EQ [ RPAR LPAR ]
## plain_instr -> I64 . DOT NE [ RPAR LPAR ]
## plain_instr -> I64 . DOT LT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL NUM ALIGN EQUAL NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2321.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2320.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2145.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2144.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2143.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 2142.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR BLOCK XOR
##
## Ends in an error in state: 2141.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2346.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2345.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2342.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2341.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2340.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2339.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2338.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2335.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2334.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2114.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2113.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2112.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2111.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 2110.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2353.
##
## expr -> LPAR IF if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1713.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1712.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1711.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1709.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1708.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 1707.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 1706.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF LPAR XOR
##
## Ends in an error in state: 1705.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR IF XOR
##
## Ends in an error in state: 1704.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2797.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 2796.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 854.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 853.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 852.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP LPAR XOR
##
## Ends in an error in state: 851.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR LOOP XOR
##
## Ends in an error in state: 850.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 833.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR PARAM RPAR XOR
##
## Ends in an error in state: 1717.
##
## if_block_param_body -> LPAR PARAM list(val_type) RPAR . if_block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR PARAM XOR
##
## Ends in an error in state: 1715.
##
## if_block_param_body -> LPAR PARAM . list(val_type) RPAR if_block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 1703.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR RESULT RPAR XOR
##
## Ends in an error in state: 1702.
##
## if_block_result_body -> LPAR RESULT list(val_type) RPAR . if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR RESULT XOR
##
## Ends in an error in state: 1700.
##
## if_block_result_body -> LPAR RESULT . list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR SELECT RPAR LPAR XOR
##
## Ends in an error in state: 846.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 845.
##
## if_ -> expr . if_ [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR SELECT XOR
##
## Ends in an error in state: 847.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2807.
##
## expr -> LPAR IF if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR THEN RPAR LPAR ELSE XOR
##
## Ends in an error in state: 2812.
##
## if_ -> LPAR THEN instr_list RPAR LPAR ELSE . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR LPAR ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR THEN RPAR LPAR XOR
##
## Ends in an error in state: 2811.
##
## if_ -> LPAR THEN instr_list RPAR LPAR . ELSE instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR THEN RPAR XOR
##
## Ends in an error in state: 2810.
##
## if_ -> LPAR THEN instr_list RPAR . LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR THEN instr_list RPAR . [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR THEN XOR
##
## Ends in an error in state: 834.
##
## if_ -> LPAR THEN . instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR THEN . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2805.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2804.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2803.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 842.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 840.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 839.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 838.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR UNREACHABLE XOR
##
## Ends in an error in state: 2326.
##
## expr -> LPAR plain_instr . expr_list RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF LPAR XOR
##
## Ends in an error in state: 837.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IF XOR
##
## Ends in an error in state: 836.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR IF . if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID I64 RPAR XOR
##
## Ends in an error in state: 3427.
##
## func_fields_import -> LPAR PARAM ID val_type RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID I64 XOR
##
## Ends in an error in state: 3426.
##
## func_fields_import -> LPAR PARAM ID val_type . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID XOR
##
## Ends in an error in state: 3425.
##
## func_fields_import -> LPAR PARAM ID . val_type RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 3418.
##
## func_fields_import -> LPAR . PARAM list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM ID val_type RPAR func_fields_import [ RPAR ]
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 3431.
##
## func_fields_import -> LPAR PARAM list(val_type) RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM XOR
##
## Ends in an error in state: 3424.
##
## func_fields_import -> LPAR PARAM . list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR PARAM . ID val_type RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 3422.
##
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3421.
##
## func_fields_import_result -> LPAR RESULT list(val_type) RPAR . func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT XOR
##
## Ends in an error in state: 3419.
##
## func_fields_import_result -> LPAR RESULT . list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3435.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID XOR
##
## Ends in an error in state: 3434.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3417.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3416.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE XOR
##
## Ends in an error in state: 3415.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE . ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE . NUM RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR XOR
##
## Ends in an error in state: 3414.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM ID val_type RPAR func_fields_import [ RPAR ]
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 3413.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 3412.
##
## func_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME . IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT NAME XOR
##
## Ends in an error in state: 3411.
##
## func_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME . NAME IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR IMPORT XOR
##
## Ends in an error in state: 3410.
##
## func_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT . NAME NAME IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL DOT GET XOR
##
## Ends in an error in state: 825.
##
## plain_instr -> LOCAL DOT GET . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT GET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL DOT SET XOR
##
## Ends in an error in state: 822.
##
## plain_instr -> LOCAL DOT SET . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT SET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL DOT TEE XOR
##
## Ends in an error in state: 819.
##
## plain_instr -> LOCAL DOT TEE . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT TEE . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL DOT XOR
##
## Ends in an error in state: 818.
##
## plain_instr -> LOCAL DOT . GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . GET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . SET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . TEE NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL ID I64 RPAR XOR
##
## Ends in an error in state: 3388.
##
## func_body -> LPAR LOCAL ID val_type RPAR . func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL ID I64 XOR
##
## Ends in an error in state: 3387.
##
## func_body -> LPAR LOCAL ID val_type . RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL ID XOR
##
## Ends in an error in state: 3386.
##
## func_body -> LPAR LOCAL ID . val_type RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL RPAR LPAR XOR
##
## Ends in an error in state: 3389.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL RPAR XOR
##
## Ends in an error in state: 3393.
##
## func_body -> LPAR LOCAL list(val_type) RPAR . func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOCAL XOR
##
## Ends in an error in state: 3385.
##
## func_body -> LPAR LOCAL . list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR LOCAL . ID val_type RPAR func_body [ RPAR ]
## plain_instr -> LOCAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT GET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET NUM [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 273.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2220.
##
## block_param_body -> LPAR PARAM list(val_type) RPAR . block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR PARAM XOR
##
## Ends in an error in state: 2218.
##
## block_param_body -> LPAR PARAM . list(val_type) RPAR block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 277.
##
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR RESULT RPAR XOR
##
## Ends in an error in state: 276.
##
## block_result_body -> LPAR RESULT list(val_type) RPAR . block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR RESULT XOR
##
## Ends in an error in state: 274.
##
## block_result_body -> LPAR RESULT . list(val_type) RPAR block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3124.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3123.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 282.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 281.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 280.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP LPAR XOR
##
## Ends in an error in state: 279.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR LOOP XOR
##
## Ends in an error in state: 278.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP . block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR MEMORY DOT INIT XOR
##
## Ends in an error in state: 120.
##
## plain_instr -> MEMORY DOT INIT . ID [ RPAR LPAR ]
## plain_instr -> MEMORY DOT INIT . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR MEMORY DOT XOR
##
## Ends in an error in state: 118.
##
## plain_instr -> MEMORY DOT . SIZE [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . GROW [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . FILL [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . COPY [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . INIT ID [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . INIT NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR MEMORY XOR
##
## Ends in an error in state: 117.
##
## plain_instr -> MEMORY . DOT SIZE [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT GROW [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT FILL [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT COPY [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT INIT ID [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT INIT NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM ID I64 RPAR XOR
##
## Ends in an error in state: 3400.
##
## func_fields_body -> LPAR PARAM ID val_type RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM ID I64 XOR
##
## Ends in an error in state: 3399.
##
## func_fields_body -> LPAR PARAM ID val_type . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM ID XOR
##
## Ends in an error in state: 3398.
##
## func_fields_body -> LPAR PARAM ID . val_type RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 3380.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_fields_body -> LPAR . PARAM list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR . PARAM ID val_type RPAR func_fields_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM RPAR XOR
##
## Ends in an error in state: 3404.
##
## func_fields_body -> LPAR PARAM list(val_type) RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR PARAM XOR
##
## Ends in an error in state: 3397.
##
## func_fields_body -> LPAR PARAM . list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR PARAM . ID val_type RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR REF DOT NULL XOR
##
## Ends in an error in state: 112.
##
## plain_instr -> REF DOT NULL . FUNC [ RPAR LPAR ]
## plain_instr -> REF DOT NULL . EXTERN [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR REF DOT XOR
##
## Ends in an error in state: 111.
##
## plain_instr -> REF DOT . NULL FUNC [ RPAR LPAR ]
## plain_instr -> REF DOT . NULL EXTERN [ RPAR LPAR ]
## plain_instr -> REF DOT . IS_NULL [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR REF FUNC XOR
##
## Ends in an error in state: 108.
##
## plain_instr -> REF FUNC . ID [ RPAR LPAR ]
## plain_instr -> REF FUNC . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR REF XOR
##
## Ends in an error in state: 107.
##
## plain_instr -> REF . DOT NULL FUNC [ RPAR LPAR ]
## plain_instr -> REF . DOT NULL EXTERN [ RPAR LPAR ]
## plain_instr -> REF . DOT IS_NULL [ RPAR LPAR ]
## plain_instr -> REF . FUNC ID [ RPAR LPAR ]
## plain_instr -> REF . FUNC NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR RESULT I64 XOR
##
## Ends in an error in state: 192.
##
## list(val_type) -> val_type . list(val_type) [ RPAR ]
##
## The known suffix of the stack is as follows:
## val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 3384.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3383.
##
## func_result_body -> LPAR RESULT list(val_type) RPAR . func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR RESULT XOR
##
## Ends in an error in state: 3381.
##
## func_result_body -> LPAR RESULT . list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3194.
##
## select_expr_result -> LPAR RESULT list(val_type) RPAR . select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR SELECT LPAR RESULT XOR
##
## Ends in an error in state: 3192.
##
## select_expr_result -> LPAR RESULT . list(val_type) RPAR select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR SELECT LPAR XOR
##
## Ends in an error in state: 99.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
## select_expr_result -> LPAR . RESULT list(val_type) RPAR select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR SELECT RPAR XOR
##
## Ends in an error in state: 2165.
##
## instr_list -> expr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR SELECT XOR
##
## Ends in an error in state: 182.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT COPY ID XOR
##
## Ends in an error in state: 95.
##
## plain_instr -> TABLE DOT COPY ID . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY ID . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT COPY NUM XOR
##
## Ends in an error in state: 92.
##
## plain_instr -> TABLE DOT COPY NUM . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY NUM . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT COPY XOR
##
## Ends in an error in state: 91.
##
## plain_instr -> TABLE DOT COPY . ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . NUM NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT FILL XOR
##
## Ends in an error in state: 88.
##
## plain_instr -> TABLE DOT FILL . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT FILL . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT GET XOR
##
## Ends in an error in state: 85.
##
## plain_instr -> TABLE DOT GET . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT GET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT GROW XOR
##
## Ends in an error in state: 82.
##
## plain_instr -> TABLE DOT GROW . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT GROW . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT INIT ID XOR
##
## Ends in an error in state: 79.
##
## plain_instr -> TABLE DOT INIT ID . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT ID . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT INIT NUM XOR
##
## Ends in an error in state: 76.
##
## plain_instr -> TABLE DOT INIT NUM . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT NUM . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT INIT XOR
##
## Ends in an error in state: 75.
##
## plain_instr -> TABLE DOT INIT . ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . NUM NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT SET XOR
##
## Ends in an error in state: 72.
##
## plain_instr -> TABLE DOT SET . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT SET . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT SIZE XOR
##
## Ends in an error in state: 69.
##
## plain_instr -> TABLE DOT SIZE . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT SIZE . NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE DOT XOR
##
## Ends in an error in state: 68.
##
## plain_instr -> TABLE DOT . GET ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GET NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SET ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SET NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SIZE ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SIZE NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GROW ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GROW NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . FILL ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . FILL NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY NUM NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT NUM NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TABLE XOR
##
## Ends in an error in state: 67.
##
## plain_instr -> TABLE . DOT GET ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GET NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SET ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SET NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SIZE ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SIZE NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GROW ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GROW NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT FILL ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT FILL NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY ID ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY NUM NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT ID ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT ID NUM [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT NUM ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT NUM NUM [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3408.
##
## func_fields -> LPAR TYPE ID RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TYPE ID XOR
##
## Ends in an error in state: 3407.
##
## func_fields -> LPAR TYPE ID . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3379.
##
## func_fields -> LPAR TYPE NUM RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TYPE NUM XOR
##
## Ends in an error in state: 3378.
##
## func_fields -> LPAR TYPE NUM . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR TYPE XOR
##
## Ends in an error in state: 3377.
##
## func_fields -> LPAR TYPE . ID RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR TYPE . NUM RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2215.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2214.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2209.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2208.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2207.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 2206.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR BLOCK XOR
##
## Ends in an error in state: 2205.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2277.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2276.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2273.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2272.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2271.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2270.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2269.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2202.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2201.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2198.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2197.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2196.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2195.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 2194.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2329.
##
## expr -> LPAR IF if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2129.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2128.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2127.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 2125.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2124.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 2123.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 2122.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR XOR
##
## Ends in an error in state: 2121.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR IF XOR
##
## Ends in an error in state: 2120.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3186.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3185.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3182.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3181.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3180.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR XOR
##
## Ends in an error in state: 3179.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR LOOP XOR
##
## Ends in an error in state: 126.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR SELECT RPAR XOR
##
## Ends in an error in state: 104.
##
## expr_list -> expr . expr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR SELECT XOR
##
## Ends in an error in state: 100.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR UNREACHABLE XOR
##
## Ends in an error in state: 2233.
##
## expr -> LPAR plain_instr . expr_list RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE LPAR XOR
##
## Ends in an error in state: 105.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR UNREACHABLE XOR
##
## Ends in an error in state: 2262.
##
## expr -> LPAR plain_instr . expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC LPAR XOR
##
## Ends in an error in state: 3376.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_fields -> LPAR . TYPE ID RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR . TYPE NUM RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR TYPE NUM RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT func_fields_import [ RPAR ]
## func_fields -> LPAR . EXPORT NAME RPAR func_fields [ RPAR ]
## func_fields_body -> LPAR . PARAM list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR . PARAM ID val_type RPAR func_fields_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC MEMORY DOT INIT XOR
##
## Ends in an error in state: 175.
##
## plain_instr -> MEMORY DOT INIT . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT INIT . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC MEMORY DOT XOR
##
## Ends in an error in state: 173.
##
## plain_instr -> MEMORY DOT . SIZE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . GROW [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . FILL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . COPY [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY DOT . INIT NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC MEMORY XOR
##
## Ends in an error in state: 172.
##
## plain_instr -> MEMORY . DOT SIZE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT GROW [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT FILL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT COPY [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> MEMORY . DOT INIT NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC REF DOT NULL XOR
##
## Ends in an error in state: 167.
##
## plain_instr -> REF DOT NULL . FUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT NULL . EXTERN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC REF DOT XOR
##
## Ends in an error in state: 166.
##
## plain_instr -> REF DOT . NULL FUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . NULL EXTERN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF DOT . IS_NULL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC REF FUNC XOR
##
## Ends in an error in state: 163.
##
## plain_instr -> REF FUNC . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF FUNC . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC REF XOR
##
## Ends in an error in state: 162.
##
## plain_instr -> REF . DOT NULL FUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT NULL EXTERN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . DOT IS_NULL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> REF . FUNC NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC RPAR XOR
##
## Ends in an error in state: 3827.
##
## list(par(module_field)) -> LPAR module_field RPAR . list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR module_field RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2744.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 2743.
##
## select_instr_results_instr -> BLOCK LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2740.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 2739.
##
## select_instr_results_instr -> BLOCK LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 2738.
##
## select_instr_results_instr -> BLOCK LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK LPAR XOR
##
## Ends in an error in state: 2737.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT BLOCK XOR
##
## Ends in an error in state: 2736.
##
## select_instr_results_instr -> BLOCK . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> BLOCK . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2732.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 2731.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2729.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 2728.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 2727.
##
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 2726.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT ID XOR
##
## Ends in an error in state: 2725.
##
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT ID . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 2640.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 2707.
##
## call_instr_params_instr -> LPAR PARAM list(val_type) RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 2705.
##
## call_instr_params_instr -> LPAR PARAM . list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 2644.
##
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 2643.
##
## call_instr_results_instr -> LPAR RESULT list(val_type) RPAR . call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 2641.
##
## call_instr_results_instr -> LPAR RESULT . list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2723.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 2722.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 2639.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM RPAR . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 2638.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE NUM . RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 2637.
##
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR TYPE . NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 2636.
##
## call_instr_params_instr -> LPAR . PARAM list(val_type) RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## call_instr_results_instr -> LPAR . RESULT list(val_type) RPAR call_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT LPAR . TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT CALL_INDIRECT XOR
##
## Ends in an error in state: 2635.
##
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . ID call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . LPAR TYPE NUM RPAR call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> CALL_INDIRECT . call_instr_params_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF ELSE XOR
##
## Ends in an error in state: 2632.
##
## select_instr_results_instr -> IF block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE ID RPAR ELSE XOR
##
## Ends in an error in state: 2627.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 2624.
##
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE ID XOR
##
## Ends in an error in state: 2623.
##
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE ID . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE NUM RPAR ELSE XOR
##
## Ends in an error in state: 2620.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR block_param_body ELSE . instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR block_param_body ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 1252.
##
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM RPAR . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 1251.
##
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE NUM . RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR TYPE XOR
##
## Ends in an error in state: 1250.
##
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR TYPE . NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF LPAR XOR
##
## Ends in an error in state: 1249.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ELSE ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ELSE ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELSE ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF LPAR . TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT IF XOR
##
## Ends in an error in state: 1248.
##
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE ID RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . LPAR TYPE NUM RPAR block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> IF . block_param_body ELSE instr_list END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3164.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3163.
##
## select_instr_results_instr -> LOOP LPAR TYPE ID . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3160.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM RPAR . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3159.
##
## select_instr_results_instr -> LOOP LPAR TYPE NUM . RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3158.
##
## select_instr_results_instr -> LOOP LPAR TYPE . ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR TYPE . NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP LPAR XOR
##
## Ends in an error in state: 3157.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ END ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ END ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 END ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP LPAR . TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LOOP XOR
##
## Ends in an error in state: 196.
##
## select_instr_results_instr -> LOOP . LPAR TYPE ID RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . LPAR TYPE NUM RPAR block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LOOP . block_param_body END [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3174.
##
## select_instr_results -> LPAR RESULT list(val_type) RPAR . select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LPAR RESULT XOR
##
## Ends in an error in state: 3172.
##
## select_instr_results -> LPAR RESULT . list(val_type) RPAR select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT LPAR XOR
##
## Ends in an error in state: 3171.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results -> LPAR . RESULT list(val_type) RPAR select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 195.
##
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT SELECT LPAR RESULT XOR
##
## Ends in an error in state: 185.
##
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT SELECT LPAR XOR
##
## Ends in an error in state: 181.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT SELECT XOR
##
## Ends in an error in state: 160.
##
## select_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT UNREACHABLE XOR
##
## Ends in an error in state: 3176.
##
## instr_list -> SELECT select_instr_results_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## SELECT select_instr_results_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC SELECT XOR
##
## Ends in an error in state: 159.
##
## instr_list -> SELECT . select_instr_results [ RPAR ]
## instr_list -> SELECT . select_instr_results_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT COPY ID XOR
##
## Ends in an error in state: 156.
##
## plain_instr -> TABLE DOT COPY ID . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY ID . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT COPY NUM XOR
##
## Ends in an error in state: 153.
##
## plain_instr -> TABLE DOT COPY NUM . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY NUM . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT COPY XOR
##
## Ends in an error in state: 152.
##
## plain_instr -> TABLE DOT COPY . ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT COPY . NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT FILL XOR
##
## Ends in an error in state: 149.
##
## plain_instr -> TABLE DOT FILL . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT FILL . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT GET XOR
##
## Ends in an error in state: 146.
##
## plain_instr -> TABLE DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT GROW XOR
##
## Ends in an error in state: 143.
##
## plain_instr -> TABLE DOT GROW . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT GROW . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT INIT ID XOR
##
## Ends in an error in state: 140.
##
## plain_instr -> TABLE DOT INIT ID . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT ID . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT INIT NUM XOR
##
## Ends in an error in state: 137.
##
## plain_instr -> TABLE DOT INIT NUM . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT NUM . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT INIT XOR
##
## Ends in an error in state: 136.
##
## plain_instr -> TABLE DOT INIT . ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT INIT . NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT SET XOR
##
## Ends in an error in state: 133.
##
## plain_instr -> TABLE DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SET . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT SIZE XOR
##
## Ends in an error in state: 130.
##
## plain_instr -> TABLE DOT SIZE . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT SIZE . NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE DOT XOR
##
## Ends in an error in state: 129.
##
## plain_instr -> TABLE DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . SIZE NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . GROW NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . FILL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . COPY NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE DOT . INIT NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC TABLE XOR
##
## Ends in an error in state: 128.
##
## plain_instr -> TABLE . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SET NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT SIZE NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT GROW NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT FILL NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT COPY NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT ID NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## plain_instr -> TABLE . DOT INIT NUM NUM [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC UNREACHABLE XOR
##
## Ends in an error in state: 2163.
##
## instr_list -> plain_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR FUNC XOR
##
## Ends in an error in state: 3373.
##
## module_field -> FUNC . option(id) func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL I64 LPAR XOR
##
## Ends in an error in state: 835.
##
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL I64 XOR
##
## Ends in an error in state: 3369.
##
## global_fields -> val_type . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL ID EXTERN
##
## Ends in an error in state: 3345.
##
## module_field -> GLOBAL option(id) . global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 3362.
##
## global_fields -> LPAR EXPORT NAME RPAR . global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR EXPORT NAME XOR
##
## Ends in an error in state: 3361.
##
## global_fields -> LPAR EXPORT NAME . RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR EXPORT XOR
##
## Ends in an error in state: 3360.
##
## global_fields -> LPAR EXPORT . NAME RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 3357.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE val_type . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE XOR
##
## Ends in an error in state: 3356.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE . val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR XOR
##
## Ends in an error in state: 3355.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 3354.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT . val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 3353.
##
## global_fields -> LPAR IMPORT NAME NAME . IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT NAME XOR
##
## Ends in an error in state: 3352.
##
## global_fields -> LPAR IMPORT NAME . NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR IMPORT XOR
##
## Ends in an error in state: 3351.
##
## global_fields -> LPAR IMPORT . NAME NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR MUTABLE I64 RPAR XOR
##
## Ends in an error in state: 3349.
##
## global_fields -> LPAR MUTABLE val_type RPAR . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 3348.
##
## global_fields -> LPAR MUTABLE val_type . RPAR instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR MUTABLE XOR
##
## Ends in an error in state: 3347.
##
## global_fields -> LPAR MUTABLE . val_type RPAR instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL LPAR XOR
##
## Ends in an error in state: 3346.
##
## global_fields -> LPAR . MUTABLE val_type RPAR instr_list [ RPAR ]
## global_fields -> LPAR . IMPORT NAME NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
## global_fields -> LPAR . EXPORT NAME RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR GLOBAL XOR
##
## Ends in an error in state: 3344.
##
## module_field -> GLOBAL . option(id) global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ID XOR
##
## Ends in an error in state: 3820.
##
## module_field -> option(id) . TYPE LPAR FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC ID XOR
##
## Ends in an error in state: 3316.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) . LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) . LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) . func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3323.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE ID XOR
##
## Ends in an error in state: 3322.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3320.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE NUM RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE NUM XOR
##
## Ends in an error in state: 3319.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE NUM . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE XOR
##
## Ends in an error in state: 3318.
##
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE . ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE . NUM RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC LPAR XOR
##
## Ends in an error in state: 3317.
##
## func_type -> LPAR . list(val_type) RPAR func_type [ RPAR ]
## func_type -> LPAR . PARAM option(id) val_type RPAR func_type [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR . TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC option(id) LPAR . TYPE NUM RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR FUNC XOR
##
## Ends in an error in state: 3315.
##
## module_field -> IMPORT NAME NAME LPAR FUNC . option(id) LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC . option(id) LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR FUNC . option(id) func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL I64 XOR
##
## Ends in an error in state: 3313.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) val_type . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id) val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL ID EXTERN
##
## Ends in an error in state: 3301.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) . val_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) . LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE I64 RPAR XOR
##
## Ends in an error in state: 3311.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 3310.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE XOR
##
## Ends in an error in state: 3303.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE . val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL LPAR XOR
##
## Ends in an error in state: 3302.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL option(id) LPAR . MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR GLOBAL XOR
##
## Ends in an error in state: 3299.
##
## module_field -> IMPORT NAME NAME LPAR GLOBAL . option(id) val_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR GLOBAL . option(id) LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR MEMORY ID XOR
##
## Ends in an error in state: 3294.
##
## module_field -> IMPORT NAME NAME LPAR MEMORY option(id) . NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR MEMORY option(id) . NAT NAT RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR MEMORY option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR MEMORY NAT NAT XOR
##
## Ends in an error in state: 3297.
##
## module_field -> IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR MEMORY NAT XOR
##
## Ends in an error in state: 3295.
##
## module_field -> IMPORT NAME NAME LPAR MEMORY option(id) NAT . RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR MEMORY option(id) NAT . NAT RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR MEMORY option(id) NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR MEMORY XOR
##
## Ends in an error in state: 3293.
##
## module_field -> IMPORT NAME NAME LPAR MEMORY . option(id) NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR MEMORY . option(id) NAT NAT RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE ID XOR
##
## Ends in an error in state: 3282.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) . NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) . NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) . NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) . NAT NAT EXTERN_REF RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT EXTERN_REF XOR
##
## Ends in an error in state: 3291.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT FUNC_REF XOR
##
## Ends in an error in state: 3289.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT NAT EXTERN_REF XOR
##
## Ends in an error in state: 3287.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT NAT FUNC_REF XOR
##
## Ends in an error in state: 3285.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT NAT XOR
##
## Ends in an error in state: 3284.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT NAT . FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT NAT . EXTERN_REF RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE NAT XOR
##
## Ends in an error in state: 3283.
##
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT . FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT . EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT . NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE option(id) NAT . NAT EXTERN_REF RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE option(id) NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR TABLE XOR
##
## Ends in an error in state: 3280.
##
## module_field -> IMPORT NAME NAME LPAR TABLE . option(id) NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE . option(id) NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE . option(id) NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR TABLE . option(id) NAT NAT EXTERN_REF RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME LPAR XOR
##
## Ends in an error in state: 3279.
##
## module_field -> IMPORT NAME NAME LPAR . FUNC option(id) LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . FUNC option(id) LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . FUNC option(id) func_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . TABLE option(id) NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . TABLE option(id) NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . TABLE option(id) NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . TABLE option(id) NAT NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . MEMORY option(id) NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . MEMORY option(id) NAT NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . GLOBAL option(id) val_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME LPAR . GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 3278.
##
## module_field -> IMPORT NAME NAME . LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR FUNC option(id) LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR FUNC option(id) func_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR TABLE option(id) NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR TABLE option(id) NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR TABLE option(id) NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR MEMORY option(id) NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR MEMORY option(id) NAT NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR GLOBAL option(id) val_type RPAR [ RPAR ]
## module_field -> IMPORT NAME NAME . LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT NAME XOR
##
## Ends in an error in state: 3277.
##
## module_field -> IMPORT NAME . NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR FUNC option(id) LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR FUNC option(id) func_type RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR TABLE option(id) NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR MEMORY option(id) NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR MEMORY option(id) NAT NAT RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR GLOBAL option(id) val_type RPAR [ RPAR ]
## module_field -> IMPORT NAME . NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR IMPORT XOR
##
## Ends in an error in state: 3276.
##
## module_field -> IMPORT . NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR FUNC option(id) LPAR TYPE NUM RPAR RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR FUNC option(id) func_type RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR TABLE option(id) NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR MEMORY option(id) NAT RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR MEMORY option(id) NAT NAT RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR GLOBAL option(id) val_type RPAR [ RPAR ]
## module_field -> IMPORT . NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA ID XOR
##
## Ends in an error in state: 60.
##
## module_field -> LPAR DATA option(id) . list(STRING) RPAR [ RPAR ]
## module_field -> LPAR DATA option(id) . option(memory_use) LPAR OFFSET instr_list RPAR list(STRING) RPAR [ RPAR ]
## module_field -> LPAR DATA option(id) . option(memory_use) expr list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3263.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 3262.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3259.
##
## expr -> LPAR BLOCK LPAR TYPE NUM RPAR . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR TYPE NUM XOR
##
## Ends in an error in state: 3258.
##
## expr -> LPAR BLOCK LPAR TYPE NUM . RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 3257.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR BLOCK LPAR TYPE . NUM RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 3256.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR BLOCK LPAR . TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR BLOCK XOR
##
## Ends in an error in state: 3255.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR BLOCK . LPAR TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3248.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 3247.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3244.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR TYPE NUM XOR
##
## Ends in an error in state: 3243.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE NUM . RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 3242.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . NUM RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 3241.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 3240.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3237.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 3236.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3233.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM RPAR . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR TYPE NUM XOR
##
## Ends in an error in state: 3232.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE NUM . RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 3231.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . NUM RPAR call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 3230.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 3229.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3227.
##
## expr -> LPAR IF if_block_param_body . RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3225.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3224.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 3223.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE NUM RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 3221.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR if_block_param_body . RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3220.
##
## expr -> LPAR IF LPAR TYPE NUM RPAR . if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE NUM XOR
##
## Ends in an error in state: 3219.
##
## expr -> LPAR IF LPAR TYPE NUM . RPAR if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 3218.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR IF LPAR TYPE . NUM RPAR if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF LPAR XOR
##
## Ends in an error in state: 3217.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE NUM RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR IF XOR
##
## Ends in an error in state: 3216.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR IF . LPAR TYPE NUM RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 3211.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 3210.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR TYPE NUM RPAR XOR
##
## Ends in an error in state: 3207.
##
## expr -> LPAR LOOP LPAR TYPE NUM RPAR . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR TYPE NUM XOR
##
## Ends in an error in state: 3206.
##
## expr -> LPAR LOOP LPAR TYPE NUM . RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 3205.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR LOOP LPAR TYPE . NUM RPAR block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP LPAR XOR
##
## Ends in an error in state: 3204.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . SELECT select_expr_result RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . BLOCK block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR LOOP LPAR . TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
## expr -> LPAR . IF if_block_param_body RPAR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LPAR LOOP LOCAL IF I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR BLOCK ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR LOOP XOR
##
## Ends in an error in state: 3203.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR LOOP . LPAR TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 3200.
##
## module_field -> LPAR DATA option(id) option(memory_use) LPAR OFFSET instr_list RPAR . list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id) option(memory_use) LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR OFFSET XOR
##
## Ends in an error in state: 3198.
##
## module_field -> LPAR DATA option(id) option(memory_use) LPAR OFFSET . instr_list RPAR list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id) option(memory_use) LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR SELECT RPAR XOR
##
## Ends in an error in state: 3271.
##
## module_field -> LPAR DATA option(id) option(memory_use) expr . list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id) option(memory_use) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR SELECT XOR
##
## Ends in an error in state: 98.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR UNREACHABLE XOR
##
## Ends in an error in state: 3268.
##
## expr -> LPAR plain_instr . expr_list RPAR [ STRING RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA LPAR XOR
##
## Ends in an error in state: 65.
##
## expr -> LPAR . plain_instr expr_list RPAR [ STRING RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE NUM RPAR call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ STRING RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . LOOP LPAR TYPE NUM RPAR block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . IF LPAR TYPE NUM RPAR if_block_param_body RPAR [ STRING RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ STRING RPAR ]
## module_field -> LPAR DATA option(id) option(memory_use) LPAR . OFFSET instr_list RPAR list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id) option(memory_use) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA MEMORY ID LOOP
##
## Ends in an error in state: 64.
##
## module_field -> LPAR DATA option(id) option(memory_use) . LPAR OFFSET instr_list RPAR list(STRING) RPAR [ RPAR ]
## module_field -> LPAR DATA option(id) option(memory_use) . expr list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA option(id) option(memory_use)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA MEMORY XOR
##
## Ends in an error in state: 61.
##
## option(memory_use) -> MEMORY . ID [ LPAR ]
## option(memory_use) -> MEMORY . NUM [ LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA STRING XOR
##
## Ends in an error in state: 47.
##
## list(STRING) -> STRING . list(STRING) [ RPAR ]
##
## The known suffix of the stack is as follows:
## STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR DATA XOR
##
## Ends in an error in state: 58.
##
## module_field -> LPAR DATA . option(id) list(STRING) RPAR [ RPAR ]
## module_field -> LPAR DATA . option(id) option(memory_use) LPAR OFFSET instr_list RPAR list(STRING) RPAR [ RPAR ]
## module_field -> LPAR DATA . option(id) option(memory_use) expr list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR START ID XOR
##
## Ends in an error in state: 56.
##
## module_field -> LPAR START ID . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR START ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR START NUM XOR
##
## Ends in an error in state: 54.
##
## module_field -> LPAR START NUM . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR START NUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR START XOR
##
## Ends in an error in state: 53.
##
## module_field -> LPAR START . ID RPAR [ RPAR ]
## module_field -> LPAR START . NUM RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR START
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR XOR
##
## Ends in an error in state: 52.
##
## module_field -> LPAR . START ID RPAR [ RPAR ]
## module_field -> LPAR . START NUM RPAR [ RPAR ]
## module_field -> LPAR . DATA option(id) list(STRING) RPAR [ RPAR ]
## module_field -> LPAR . DATA option(id) option(memory_use) LPAR OFFSET instr_list RPAR list(STRING) RPAR [ RPAR ]
## module_field -> LPAR . DATA option(id) option(memory_use) expr list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY ID XOR
##
## Ends in an error in state: 32.
##
## module_field -> MEMORY option(id) . memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR DATA XOR
##
## Ends in an error in state: 46.
##
## memory_fields -> LPAR DATA . list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 44.
##
## memory_fields -> LPAR EXPORT NAME RPAR . memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR EXPORT NAME XOR
##
## Ends in an error in state: 43.
##
## memory_fields -> LPAR EXPORT NAME . RPAR memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR EXPORT XOR
##
## Ends in an error in state: 42.
##
## memory_fields -> LPAR EXPORT . NAME RPAR memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR IMPORT NAME NAME IMPORT NAT XOR
##
## Ends in an error in state: 40.
##
## memory_fields -> LPAR IMPORT NAME NAME IMPORT NAT . [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 39.
##
## memory_fields -> LPAR IMPORT NAME NAME IMPORT . NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 38.
##
## memory_fields -> LPAR IMPORT NAME NAME . IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR IMPORT NAME XOR
##
## Ends in an error in state: 37.
##
## memory_fields -> LPAR IMPORT NAME . NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR IMPORT XOR
##
## Ends in an error in state: 36.
##
## memory_fields -> LPAR IMPORT . NAME NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY LPAR XOR
##
## Ends in an error in state: 35.
##
## memory_fields -> LPAR . IMPORT NAME NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT [ RPAR ]
## memory_fields -> LPAR . EXPORT NAME RPAR memory_fields [ RPAR ]
## memory_fields -> LPAR . DATA list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY NAT XOR
##
## Ends in an error in state: 33.
##
## memory_fields -> NAT . [ RPAR ]
## memory_fields -> NAT . NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR MEMORY XOR
##
## Ends in an error in state: 31.
##
## module_field -> MEMORY . option(id) memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE ID XOR
##
## Ends in an error in state: 8.
##
## module_field -> TABLE option(id) . table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## TABLE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 28.
##
## table_fields -> LPAR EXPORT NAME RPAR . table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR EXPORT NAME XOR
##
## Ends in an error in state: 27.
##
## table_fields -> LPAR EXPORT NAME . RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR EXPORT XOR
##
## Ends in an error in state: 26.
##
## table_fields -> LPAR EXPORT . NAME RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT NAME NAME IMPORT NAT NAT XOR
##
## Ends in an error in state: 21.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT NAT . FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT NAT . EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT NAME NAME IMPORT NAT XOR
##
## Ends in an error in state: 20.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 19.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 18.
##
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT NAME XOR
##
## Ends in an error in state: 17.
##
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR IMPORT XOR
##
## Ends in an error in state: 16.
##
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE LPAR XOR
##
## Ends in an error in state: 15.
##
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR . EXPORT NAME RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE NAT EXTERN_REF ROTR
##
## Ends in an error in state: 3826.
##
## list(par(module_field)) -> LPAR module_field . RPAR list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR module_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE NAT NAT XOR
##
## Ends in an error in state: 10.
##
## table_fields -> NAT NAT . FUNC_REF [ RPAR ]
## table_fields -> NAT NAT . EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE NAT XOR
##
## Ends in an error in state: 9.
##
## table_fields -> NAT . FUNC_REF [ RPAR ]
## table_fields -> NAT . EXTERN_REF [ RPAR ]
## table_fields -> NAT . NAT FUNC_REF [ RPAR ]
## table_fields -> NAT . NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TABLE XOR
##
## Ends in an error in state: 6.
##
## module_field -> TABLE . option(id) table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM I64 RPAR XOR
##
## Ends in an error in state: 3334.
##
## func_type -> LPAR PARAM option(id) val_type RPAR . func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id) val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM I64 XOR
##
## Ends in an error in state: 3333.
##
## func_type -> LPAR PARAM option(id) val_type . RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id) val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM ID EXTERN
##
## Ends in an error in state: 3332.
##
## func_type -> LPAR PARAM option(id) . val_type RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM XOR
##
## Ends in an error in state: 3330.
##
## func_type -> LPAR PARAM . option(id) val_type RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 3328.
##
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT RPAR XOR
##
## Ends in an error in state: 3327.
##
## list(par(preceded(RESULT,list(val_type)))) -> LPAR RESULT list(val_type) RPAR . list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT XOR
##
## Ends in an error in state: 3325.
##
## list(par(preceded(RESULT,list(val_type)))) -> LPAR RESULT . list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RPAR XOR
##
## Ends in an error in state: 3337.
##
## func_type -> LPAR list(val_type) RPAR . func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR XOR
##
## Ends in an error in state: 3335.
##
## func_type -> LPAR . list(val_type) RPAR func_type [ RPAR ]
## func_type -> LPAR . PARAM option(id) val_type RPAR func_type [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC XOR
##
## Ends in an error in state: 3823.
##
## module_field -> option(id) TYPE LPAR FUNC . func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR XOR
##
## Ends in an error in state: 3822.
##
## module_field -> option(id) TYPE LPAR . FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE XOR
##
## Ends in an error in state: 3821.
##
## module_field -> option(id) TYPE . LPAR FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR XOR
##
## Ends in an error in state: 5.
##
## list(par(module_field)) -> LPAR . module_field RPAR list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE RPAR XOR
##
## Ends in an error in state: 3830.
##
## module_ -> LPAR MODULE option(id) list(par(module_field)) RPAR . EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE option(id) list(par(module_field)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE XOR
##
## Ends in an error in state: 2.
##
## module_ -> LPAR MODULE . option(id) list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR XOR
##
## Ends in an error in state: 1.
##
## module_ -> LPAR . MODULE option(id) list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: XOR
##
## Ends in an error in state: 0.
##
## module_' -> . module_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

