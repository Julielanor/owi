module_: LPAR MODULE ID XOR
##
## Ends in an error in state: 4.
##
## module_ -> LPAR MODULE option(id) . list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR ID XOR
##
## Ends in an error in state: 1855.
##
## module_field -> option(id) . TYPE LPAR FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1828.
##
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1826.
##
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1830.
##
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1825.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE EXTERN_REF XOR
##
## Ends in an error in state: 1824.
##
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC XOR
##
## Ends in an error in state: 1821.
##
## module_field -> LPAR ELEM option(id) DECLARE FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1817.
##
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1815.
##
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1819.
##
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC_REF LPAR XOR
##
## Ends in an error in state: 1814.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE FUNC_REF XOR
##
## Ends in an error in state: 1813.
##
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM DECLARE XOR
##
## Ends in an error in state: 1812.
##
## module_field -> LPAR ELEM option(id) DECLARE . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) DECLARE . EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) DECLARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1808.
##
## module_field -> LPAR ELEM option(id) EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1806.
##
## module_field -> LPAR ELEM option(id) EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1810.
##
## module_field -> LPAR ELEM option(id) EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1805.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM EXTERN_REF XOR
##
## Ends in an error in state: 1804.
##
## module_field -> LPAR ELEM option(id) EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC ID XOR
##
## Ends in an error in state: 1552.
##
## list(elem_var) -> ID . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC U32 XOR
##
## Ends in an error in state: 1551.
##
## list(elem_var) -> U32 . list(elem_var) [ RPAR ]
##
## The known suffix of the stack is as follows:
## U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC XOR
##
## Ends in an error in state: 1801.
##
## module_field -> LPAR ELEM option(id) FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1797.
##
## module_field -> LPAR ELEM option(id) FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1795.
##
## module_field -> LPAR ELEM option(id) FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1799.
##
## module_field -> LPAR ELEM option(id) FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC_REF LPAR XOR
##
## Ends in an error in state: 1794.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM FUNC_REF XOR
##
## Ends in an error in state: 1793.
##
## module_field -> LPAR ELEM option(id) FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM ID DATA
##
## Ends in an error in state: 1532.
##
## module_field -> LPAR ELEM option(id) . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE ID expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . TABLE U32 expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . DECLARE FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . DECLARE FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . DECLARE FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . DECLARE EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . DECLARE EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . LPAR OFFSET instr_list RPAR list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) . expr list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1785.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 1784.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1781.
##
## expr -> LPAR BLOCK LPAR TYPE U32 RPAR . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR TYPE U32 XOR
##
## Ends in an error in state: 1780.
##
## expr -> LPAR BLOCK LPAR TYPE U32 . RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1779.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR TYPE . U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 1778.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR . TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR BLOCK XOR
##
## Ends in an error in state: 1777.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . LPAR TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1770.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 1769.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1766.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 1765.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 1764.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 1763.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 1762.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1759.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 1758.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1755.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 RPAR . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1754.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 . RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 1753.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 1752.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 1751.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1749.
##
## expr -> LPAR IF if_block_param_body . RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1747.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1746.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1745.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE U32 RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1743.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR if_block_param_body . RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1742.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR . if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE U32 XOR
##
## Ends in an error in state: 1741.
##
## expr -> LPAR IF LPAR TYPE U32 . RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 1740.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF LPAR TYPE . U32 RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF LPAR XOR
##
## Ends in an error in state: 1739.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE U32 RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR IF XOR
##
## Ends in an error in state: 1738.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . LPAR TYPE U32 RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOCAL XOR
##
## Ends in an error in state: 788.
##
## plain_instr -> LOCAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT GET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1733.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 1732.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1729.
##
## expr -> LPAR LOOP LPAR TYPE U32 RPAR . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR TYPE U32 XOR
##
## Ends in an error in state: 1728.
##
## expr -> LPAR LOOP LPAR TYPE U32 . RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 1727.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR TYPE . U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP LPAR XOR
##
## Ends in an error in state: 1726.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR . TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR LOOP XOR
##
## Ends in an error in state: 1725.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . LPAR TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1719.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1717.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1721.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1716.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1715.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 1712.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1708.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1706.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1710.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1705.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 1704.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 1703.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET instr_list RPAR . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR OFFSET XOR
##
## Ends in an error in state: 1701.
##
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR OFFSET . instr_list RPAR list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1848.
##
## module_field -> LPAR ELEM option(id) expr EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1846.
##
## module_field -> LPAR ELEM option(id) expr EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1850.
##
## module_field -> LPAR ELEM option(id) expr EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1845.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1844.
##
## module_field -> LPAR ELEM option(id) expr EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 1841.
##
## module_field -> LPAR ELEM option(id) expr FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1837.
##
## module_field -> LPAR ELEM option(id) expr FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1835.
##
## module_field -> LPAR ELEM option(id) expr FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1839.
##
## module_field -> LPAR ELEM option(id) expr FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1834.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 1833.
##
## module_field -> LPAR ELEM option(id) expr FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1832.
##
## module_field -> LPAR ELEM option(id) expr . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr . EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) expr . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR SELECT XOR
##
## Ends in an error in state: 1698.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR UNREACHABLE XOR
##
## Ends in an error in state: 1790.
##
## expr -> LPAR plain_instr . expr_list RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM LPAR XOR
##
## Ends in an error in state: 1697.
##
## expr -> LPAR . plain_instr expr_list RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ U32 RPAR ID FUNC_REF FUNC EXTERN_REF ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) LPAR . OFFSET instr_list RPAR list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1673.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1671.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1675.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1670.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1669.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 1666.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1662.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1660.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1664.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1659.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 1658.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 1657.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR . EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR OFFSET XOR
##
## Ends in an error in state: 1655.
##
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR OFFSET . instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1693.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1691.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1695.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1690.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1689.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 1686.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1682.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1680.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1684.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1679.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 1678.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1677.
##
## module_field -> LPAR ELEM option(id) TABLE ID expr . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID expr . EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID LPAR XOR
##
## Ends in an error in state: 1654.
##
## expr -> LPAR . plain_instr expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID LPAR . OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE ID XOR
##
## Ends in an error in state: 1653.
##
## module_field -> LPAR ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE ID . expr EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1625.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 1624.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1621.
##
## expr -> LPAR BLOCK LPAR TYPE U32 RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR TYPE U32 XOR
##
## Ends in an error in state: 1620.
##
## expr -> LPAR BLOCK LPAR TYPE U32 . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1619.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR TYPE . U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 1618.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK LPAR . TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR BLOCK XOR
##
## Ends in an error in state: 1617.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR BLOCK . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1610.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 1609.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1606.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 1605.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 1604.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 1603.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 1602.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1599.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 1598.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1595.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 RPAR . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1594.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 . RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 1593.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 1592.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 1591.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1589.
##
## expr -> LPAR IF if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1587.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1586.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1585.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE U32 RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1583.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR if_block_param_body . RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1582.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE U32 XOR
##
## Ends in an error in state: 1581.
##
## expr -> LPAR IF LPAR TYPE U32 . RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 1580.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF LPAR TYPE . U32 RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF LPAR XOR
##
## Ends in an error in state: 1579.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE U32 RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR IF XOR
##
## Ends in an error in state: 1578.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . LPAR TYPE U32 RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR IF . if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1573.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 1572.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1569.
##
## expr -> LPAR LOOP LPAR TYPE U32 RPAR . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR TYPE U32 XOR
##
## Ends in an error in state: 1568.
##
## expr -> LPAR LOOP LPAR TYPE U32 . RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 1567.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR TYPE . U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP LPAR XOR
##
## Ends in an error in state: 1566.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP LPAR . TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR LOOP XOR
##
## Ends in an error in state: 1565.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR LOOP . block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1561.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1559.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1563.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1558.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1557.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC XOR
##
## Ends in an error in state: 1550.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1546.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1544.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1548.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1543.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR FUNC_REF XOR
##
## Ends in an error in state: 1542.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET RPAR XOR
##
## Ends in an error in state: 1541.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR . EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR OFFSET XOR
##
## Ends in an error in state: 1539.
##
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET . instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET . instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET . instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET . instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR OFFSET . instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR EXTERN_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1649.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR EXTERN_REF LPAR ITEM XOR
##
## Ends in an error in state: 1647.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR EXTERN_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1651.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr EXTERN_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR EXTERN_REF LPAR XOR
##
## Ends in an error in state: 1646.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr EXTERN_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR EXTERN_REF XOR
##
## Ends in an error in state: 1645.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr EXTERN_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC XOR
##
## Ends in an error in state: 1642.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC . list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC_REF LPAR ITEM RPAR XOR
##
## Ends in an error in state: 1638.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR ITEM instr_list RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR ITEM instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC_REF LPAR ITEM XOR
##
## Ends in an error in state: 1636.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR ITEM . instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR ITEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC_REF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1640.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF expr . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC_REF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC_REF LPAR XOR
##
## Ends in an error in state: 1635.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR . ITEM instr_list RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC_REF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR FUNC_REF XOR
##
## Ends in an error in state: 1634.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF . LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr FUNC_REF . expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1633.
##
## module_field -> LPAR ELEM option(id) TABLE U32 expr . FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr . FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr . FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr . EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 expr . EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR SELECT XOR
##
## Ends in an error in state: 1536.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR UNREACHABLE XOR
##
## Ends in an error in state: 1630.
##
## expr -> LPAR plain_instr . expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 LPAR XOR
##
## Ends in an error in state: 1535.
##
## expr -> LPAR . plain_instr expr_list RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . SELECT select_expr_result RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . BLOCK block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . LOOP block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## expr -> LPAR . IF if_block_param_body RPAR [ FUNC_REF FUNC EXTERN_REF ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR . OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR . OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR . OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR . OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 LPAR . OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32 LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE U32 XOR
##
## Ends in an error in state: 1534.
##
## module_field -> LPAR ELEM option(id) TABLE U32 . LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE U32 . expr EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM TABLE XOR
##
## Ends in an error in state: 1533.
##
## module_field -> LPAR ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . ID expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM option(id) TABLE . U32 expr EXTERN_REF expr RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM option(id) TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR ELEM XOR
##
## Ends in an error in state: 1530.
##
## module_field -> LPAR ELEM . option(id) FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE ID expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) TABLE U32 expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) DECLARE FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) DECLARE FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) DECLARE FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) DECLARE EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) DECLARE EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) LPAR OFFSET instr_list RPAR list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR ELEM . option(id) expr list(elem_var) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR FUNC ID RPAR XOR
##
## Ends in an error in state: 1528.
##
## module_field -> LPAR EXPORT NAME LPAR FUNC ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR FUNC ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR FUNC ID XOR
##
## Ends in an error in state: 1527.
##
## module_field -> LPAR EXPORT NAME LPAR FUNC ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR FUNC U32 RPAR XOR
##
## Ends in an error in state: 1525.
##
## module_field -> LPAR EXPORT NAME LPAR FUNC U32 RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR FUNC U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR FUNC U32 XOR
##
## Ends in an error in state: 1524.
##
## module_field -> LPAR EXPORT NAME LPAR FUNC U32 . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR FUNC U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR FUNC XOR
##
## Ends in an error in state: 1523.
##
## module_field -> LPAR EXPORT NAME LPAR FUNC . ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR FUNC . U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR GLOBAL ID RPAR XOR
##
## Ends in an error in state: 1521.
##
## module_field -> LPAR EXPORT NAME LPAR GLOBAL ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR GLOBAL ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR GLOBAL ID XOR
##
## Ends in an error in state: 1520.
##
## module_field -> LPAR EXPORT NAME LPAR GLOBAL ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR GLOBAL ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR GLOBAL U32 RPAR XOR
##
## Ends in an error in state: 1518.
##
## module_field -> LPAR EXPORT NAME LPAR GLOBAL U32 RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR GLOBAL U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR GLOBAL U32 XOR
##
## Ends in an error in state: 1517.
##
## module_field -> LPAR EXPORT NAME LPAR GLOBAL U32 . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR GLOBAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR GLOBAL XOR
##
## Ends in an error in state: 1516.
##
## module_field -> LPAR EXPORT NAME LPAR GLOBAL . ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR GLOBAL . U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR MEMORY ID RPAR XOR
##
## Ends in an error in state: 1514.
##
## module_field -> LPAR EXPORT NAME LPAR MEMORY ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR MEMORY ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR MEMORY ID XOR
##
## Ends in an error in state: 1513.
##
## module_field -> LPAR EXPORT NAME LPAR MEMORY ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR MEMORY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR MEMORY U32 RPAR XOR
##
## Ends in an error in state: 1511.
##
## module_field -> LPAR EXPORT NAME LPAR MEMORY U32 RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR MEMORY U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR MEMORY U32 XOR
##
## Ends in an error in state: 1510.
##
## module_field -> LPAR EXPORT NAME LPAR MEMORY U32 . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR MEMORY U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR MEMORY XOR
##
## Ends in an error in state: 1509.
##
## module_field -> LPAR EXPORT NAME LPAR MEMORY . ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR MEMORY . U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR TABLE ID RPAR XOR
##
## Ends in an error in state: 1507.
##
## module_field -> LPAR EXPORT NAME LPAR TABLE ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR TABLE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR TABLE ID XOR
##
## Ends in an error in state: 1506.
##
## module_field -> LPAR EXPORT NAME LPAR TABLE ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR TABLE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR TABLE U32 RPAR XOR
##
## Ends in an error in state: 1504.
##
## module_field -> LPAR EXPORT NAME LPAR TABLE U32 RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR TABLE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR TABLE U32 XOR
##
## Ends in an error in state: 1503.
##
## module_field -> LPAR EXPORT NAME LPAR TABLE U32 . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR TABLE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR TABLE XOR
##
## Ends in an error in state: 1502.
##
## module_field -> LPAR EXPORT NAME LPAR TABLE . ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR TABLE . U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME LPAR XOR
##
## Ends in an error in state: 1501.
##
## module_field -> LPAR EXPORT NAME LPAR . FUNC ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . FUNC U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . TABLE ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . TABLE U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . MEMORY ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . MEMORY U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . GLOBAL ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME LPAR . GLOBAL U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT NAME XOR
##
## Ends in an error in state: 1500.
##
## module_field -> LPAR EXPORT NAME . LPAR FUNC ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR FUNC U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR TABLE ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR TABLE U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR MEMORY ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR MEMORY U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR GLOBAL ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT NAME . LPAR GLOBAL U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR EXPORT XOR
##
## Ends in an error in state: 1499.
##
## module_field -> LPAR EXPORT . NAME LPAR FUNC ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR FUNC U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR TABLE ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR TABLE U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR MEMORY ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR MEMORY U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR GLOBAL ID RPAR RPAR [ RPAR ]
## module_field -> LPAR EXPORT . NAME LPAR GLOBAL U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC ID XOR
##
## Ends in an error in state: 697.
##
## module_field -> LPAR FUNC option(id) . func_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR FUNC option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1436.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 1435.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1432.
##
## expr -> LPAR BLOCK LPAR TYPE U32 RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR TYPE U32 XOR
##
## Ends in an error in state: 1431.
##
## expr -> LPAR BLOCK LPAR TYPE U32 . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1430.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK LPAR TYPE . U32 RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 1429.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE U32 RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BLOCK XOR
##
## Ends in an error in state: 1428.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK . LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BR XOR
##
## Ends in an error in state: 1268.
##
## plain_instr -> BR . ID [ RPAR LPAR ]
## plain_instr -> BR . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR BRIF XOR
##
## Ends in an error in state: 1265.
##
## plain_instr -> BRIF . ID [ RPAR LPAR ]
## plain_instr -> BRIF . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL XOR
##
## Ends in an error in state: 1261.
##
## plain_instr -> CALL . ID [ RPAR LPAR ]
## plain_instr -> CALL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1421.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 1420.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1417.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 1416.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 1415.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 1414.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 1413.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 1239.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 1259.
##
## call_expr_params -> LPAR PARAM list(val_type) RPAR . call_expr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 1257.
##
## call_expr_params -> LPAR PARAM . list(val_type) RPAR call_expr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 1243.
##
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 1242.
##
## call_expr_results -> LPAR RESULT list(val_type) RPAR . call_expr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 1240.
##
## call_expr_results -> LPAR RESULT . list(val_type) RPAR call_expr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1410.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 1409.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1406.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 RPAR . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1405.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 . RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 1404.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . U32 RPAR call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 1403.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 1402.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR DATA DOT DROP XOR
##
## Ends in an error in state: 1231.
##
## plain_instr -> DATA DOT DROP . ID [ RPAR LPAR ]
## plain_instr -> DATA DOT DROP . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR DATA DOT XOR
##
## Ends in an error in state: 1230.
##
## plain_instr -> DATA DOT . DROP ID [ RPAR LPAR ]
## plain_instr -> DATA DOT . DROP U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR DATA XOR
##
## Ends in an error in state: 1229.
##
## plain_instr -> DATA . DOT DROP ID [ RPAR LPAR ]
## plain_instr -> DATA . DOT DROP U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR ELEM DOT DROP XOR
##
## Ends in an error in state: 1225.
##
## plain_instr -> ELEM DOT DROP . ID [ RPAR LPAR ]
## plain_instr -> ELEM DOT DROP . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR ELEM DOT XOR
##
## Ends in an error in state: 1224.
##
## plain_instr -> ELEM DOT . DROP ID [ RPAR LPAR ]
## plain_instr -> ELEM DOT . DROP U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR ELEM XOR
##
## Ends in an error in state: 1223.
##
## plain_instr -> ELEM . DOT DROP ID [ RPAR LPAR ]
## plain_instr -> ELEM . DOT DROP U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 1494.
##
## func_fields -> LPAR EXPORT NAME RPAR . func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR EXPORT NAME XOR
##
## Ends in an error in state: 1493.
##
## func_fields -> LPAR EXPORT NAME . RPAR func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR EXPORT XOR
##
## Ends in an error in state: 1492.
##
## func_fields -> LPAR EXPORT . NAME RPAR func_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT CONST XOR
##
## Ends in an error in state: 1218.
##
## plain_instr -> F32 DOT CONST . FLOAT [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1215.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1212.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1211.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT CONVERT XOR
##
## Ends in an error in state: 1210.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1200.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1199.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1198.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1197.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1196.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT LOAD XOR
##
## Ends in an error in state: 1195.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1185.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1184.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1181.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1180.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1179.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1178.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1177.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT STORE XOR
##
## Ends in an error in state: 1176.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 DOT XOR
##
## Ends in an error in state: 1173.
##
## plain_instr -> F32 DOT . CONST FLOAT [ RPAR LPAR ]
## plain_instr -> F32 DOT . ABS [ RPAR LPAR ]
## plain_instr -> F32 DOT . NEG [ RPAR LPAR ]
## plain_instr -> F32 DOT . SQRT [ RPAR LPAR ]
## plain_instr -> F32 DOT . CEIL [ RPAR LPAR ]
## plain_instr -> F32 DOT . FLOOR [ RPAR LPAR ]
## plain_instr -> F32 DOT . TRUNC [ RPAR LPAR ]
## plain_instr -> F32 DOT . NEAREST [ RPAR LPAR ]
## plain_instr -> F32 DOT . ADD [ RPAR LPAR ]
## plain_instr -> F32 DOT . SUB [ RPAR LPAR ]
## plain_instr -> F32 DOT . MUL [ RPAR LPAR ]
## plain_instr -> F32 DOT . DIV [ RPAR LPAR ]
## plain_instr -> F32 DOT . MIN [ RPAR LPAR ]
## plain_instr -> F32 DOT . MAX [ RPAR LPAR ]
## plain_instr -> F32 DOT . COPYSIGN [ RPAR LPAR ]
## plain_instr -> F32 DOT . EQ [ RPAR LPAR ]
## plain_instr -> F32 DOT . NE [ RPAR LPAR ]
## plain_instr -> F32 DOT . LT [ RPAR LPAR ]
## plain_instr -> F32 DOT . GT [ RPAR LPAR ]
## plain_instr -> F32 DOT . LE [ RPAR LPAR ]
## plain_instr -> F32 DOT . GE [ RPAR LPAR ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F32 XOR
##
## Ends in an error in state: 1172.
##
## plain_instr -> F32 . DOT CONST FLOAT [ RPAR LPAR ]
## plain_instr -> F32 . DOT ABS [ RPAR LPAR ]
## plain_instr -> F32 . DOT NEG [ RPAR LPAR ]
## plain_instr -> F32 . DOT SQRT [ RPAR LPAR ]
## plain_instr -> F32 . DOT CEIL [ RPAR LPAR ]
## plain_instr -> F32 . DOT FLOOR [ RPAR LPAR ]
## plain_instr -> F32 . DOT TRUNC [ RPAR LPAR ]
## plain_instr -> F32 . DOT NEAREST [ RPAR LPAR ]
## plain_instr -> F32 . DOT ADD [ RPAR LPAR ]
## plain_instr -> F32 . DOT SUB [ RPAR LPAR ]
## plain_instr -> F32 . DOT MUL [ RPAR LPAR ]
## plain_instr -> F32 . DOT DIV [ RPAR LPAR ]
## plain_instr -> F32 . DOT MIN [ RPAR LPAR ]
## plain_instr -> F32 . DOT MAX [ RPAR LPAR ]
## plain_instr -> F32 . DOT COPYSIGN [ RPAR LPAR ]
## plain_instr -> F32 . DOT EQ [ RPAR LPAR ]
## plain_instr -> F32 . DOT NE [ RPAR LPAR ]
## plain_instr -> F32 . DOT LT [ RPAR LPAR ]
## plain_instr -> F32 . DOT GT [ RPAR LPAR ]
## plain_instr -> F32 . DOT LE [ RPAR LPAR ]
## plain_instr -> F32 . DOT GE [ RPAR LPAR ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 1166.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 1163.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 1162.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT CONVERT XOR
##
## Ends in an error in state: 1161.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1152.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1151.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1150.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1149.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1148.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT LOAD XOR
##
## Ends in an error in state: 1147.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1136.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 1135.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1132.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1131.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1130.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1129.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1128.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT STORE XOR
##
## Ends in an error in state: 1127.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 DOT XOR
##
## Ends in an error in state: 1124.
##
## plain_instr -> F64 DOT . ABS [ RPAR LPAR ]
## plain_instr -> F64 DOT . NEG [ RPAR LPAR ]
## plain_instr -> F64 DOT . SQRT [ RPAR LPAR ]
## plain_instr -> F64 DOT . CEIL [ RPAR LPAR ]
## plain_instr -> F64 DOT . FLOOR [ RPAR LPAR ]
## plain_instr -> F64 DOT . TRUNC [ RPAR LPAR ]
## plain_instr -> F64 DOT . NEAREST [ RPAR LPAR ]
## plain_instr -> F64 DOT . ADD [ RPAR LPAR ]
## plain_instr -> F64 DOT . SUB [ RPAR LPAR ]
## plain_instr -> F64 DOT . MUL [ RPAR LPAR ]
## plain_instr -> F64 DOT . DIV [ RPAR LPAR ]
## plain_instr -> F64 DOT . MIN [ RPAR LPAR ]
## plain_instr -> F64 DOT . MAX [ RPAR LPAR ]
## plain_instr -> F64 DOT . COPYSIGN [ RPAR LPAR ]
## plain_instr -> F64 DOT . EQ [ RPAR LPAR ]
## plain_instr -> F64 DOT . NE [ RPAR LPAR ]
## plain_instr -> F64 DOT . LT [ RPAR LPAR ]
## plain_instr -> F64 DOT . GT [ RPAR LPAR ]
## plain_instr -> F64 DOT . LE [ RPAR LPAR ]
## plain_instr -> F64 DOT . GE [ RPAR LPAR ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR F64 XOR
##
## Ends in an error in state: 1123.
##
## plain_instr -> F64 . DOT ABS [ RPAR LPAR ]
## plain_instr -> F64 . DOT NEG [ RPAR LPAR ]
## plain_instr -> F64 . DOT SQRT [ RPAR LPAR ]
## plain_instr -> F64 . DOT CEIL [ RPAR LPAR ]
## plain_instr -> F64 . DOT FLOOR [ RPAR LPAR ]
## plain_instr -> F64 . DOT TRUNC [ RPAR LPAR ]
## plain_instr -> F64 . DOT NEAREST [ RPAR LPAR ]
## plain_instr -> F64 . DOT ADD [ RPAR LPAR ]
## plain_instr -> F64 . DOT SUB [ RPAR LPAR ]
## plain_instr -> F64 . DOT MUL [ RPAR LPAR ]
## plain_instr -> F64 . DOT DIV [ RPAR LPAR ]
## plain_instr -> F64 . DOT MIN [ RPAR LPAR ]
## plain_instr -> F64 . DOT MAX [ RPAR LPAR ]
## plain_instr -> F64 . DOT COPYSIGN [ RPAR LPAR ]
## plain_instr -> F64 . DOT EQ [ RPAR LPAR ]
## plain_instr -> F64 . DOT NE [ RPAR LPAR ]
## plain_instr -> F64 . DOT LT [ RPAR LPAR ]
## plain_instr -> F64 . DOT GT [ RPAR LPAR ]
## plain_instr -> F64 . DOT LE [ RPAR LPAR ]
## plain_instr -> F64 . DOT GE [ RPAR LPAR ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ RPAR LPAR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ RPAR LPAR ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR GLOBAL DOT GET XOR
##
## Ends in an error in state: 1120.
##
## plain_instr -> GLOBAL DOT GET . ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT GET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR GLOBAL DOT SET XOR
##
## Ends in an error in state: 1117.
##
## plain_instr -> GLOBAL DOT SET . ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT SET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR GLOBAL DOT XOR
##
## Ends in an error in state: 1116.
##
## plain_instr -> GLOBAL DOT . GET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . GET U32 [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . SET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL DOT . SET U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR GLOBAL XOR
##
## Ends in an error in state: 1115.
##
## plain_instr -> GLOBAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT GET U32 [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> GLOBAL . DOT SET U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT CONST XOR
##
## Ends in an error in state: 1110.
##
## plain_instr -> I32 DOT CONST . INT [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT DIV XOR
##
## Ends in an error in state: 1106.
##
## plain_instr -> I32 DOT DIV . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 1102.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 1100.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT GE XOR
##
## Ends in an error in state: 1097.
##
## plain_instr -> I32 DOT GE . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT GE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT GT XOR
##
## Ends in an error in state: 1094.
##
## plain_instr -> I32 DOT GT . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT GT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LE XOR
##
## Ends in an error in state: 1091.
##
## plain_instr -> I32 DOT LE . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT LE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1089.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1088.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1087.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 1086.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 1085.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD XOR
##
## Ends in an error in state: 1084.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1082.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1081.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1080.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1079.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 1078.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 1077.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1075.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1074.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1073.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1072.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1071.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 1070.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD16 XOR
##
## Ends in an error in state: 1069.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1067.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1066.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1065.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1064.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 1063.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 1062.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1060.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1059.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1058.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 1057.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 1056.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 1055.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LOAD8 XOR
##
## Ends in an error in state: 1054.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT LT XOR
##
## Ends in an error in state: 1051.
##
## plain_instr -> I32 DOT LT . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT LT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 1044.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 1043.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT REM XOR
##
## Ends in an error in state: 1040.
##
## plain_instr -> I32 DOT REM . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT REM . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT SHR XOR
##
## Ends in an error in state: 1034.
##
## plain_instr -> I32 DOT SHR . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1032.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1031.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1030.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 1029.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 1028.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE XOR
##
## Ends in an error in state: 1027.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1025.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1024.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1023.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 1022.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 1021.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE16 XOR
##
## Ends in an error in state: 1020.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 1018.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 1017.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 1016.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 1015.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 1014.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT STORE8 XOR
##
## Ends in an error in state: 1013.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 1009.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 1006.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 1003.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 1000.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 999.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 998.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 997.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT TRUNC XOR
##
## Ends in an error in state: 996.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 DOT UNSIGNED
##
## Ends in an error in state: 993.
##
## plain_instr -> I32 DOT . CONST INT [ RPAR LPAR ]
## plain_instr -> I32 DOT . CLZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . CTZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . POPCNT [ RPAR LPAR ]
## plain_instr -> I32 DOT . ADD [ RPAR LPAR ]
## plain_instr -> I32 DOT . SUB [ RPAR LPAR ]
## plain_instr -> I32 DOT . MUL [ RPAR LPAR ]
## plain_instr -> I32 DOT . DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REM SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . AND [ RPAR LPAR ]
## plain_instr -> I32 DOT . OR [ RPAR LPAR ]
## plain_instr -> I32 DOT . XOR [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHL [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . ROTL [ RPAR LPAR ]
## plain_instr -> I32 DOT . ROTR [ RPAR LPAR ]
## plain_instr -> I32 DOT . EQZ [ RPAR LPAR ]
## plain_instr -> I32 DOT . EQ [ RPAR LPAR ]
## plain_instr -> I32 DOT . NE [ RPAR LPAR ]
## plain_instr -> I32 DOT . LT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . WRAPI64 [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I32 XOR
##
## Ends in an error in state: 992.
##
## plain_instr -> I32 . DOT CONST INT [ RPAR LPAR ]
## plain_instr -> I32 . DOT CLZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT CTZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT POPCNT [ RPAR LPAR ]
## plain_instr -> I32 . DOT ADD [ RPAR LPAR ]
## plain_instr -> I32 . DOT SUB [ RPAR LPAR ]
## plain_instr -> I32 . DOT MUL [ RPAR LPAR ]
## plain_instr -> I32 . DOT DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REM SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT AND [ RPAR LPAR ]
## plain_instr -> I32 . DOT OR [ RPAR LPAR ]
## plain_instr -> I32 . DOT XOR [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHL [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT ROTL [ RPAR LPAR ]
## plain_instr -> I32 . DOT ROTR [ RPAR LPAR ]
## plain_instr -> I32 . DOT EQZ [ RPAR LPAR ]
## plain_instr -> I32 . DOT EQ [ RPAR LPAR ]
## plain_instr -> I32 . DOT NE [ RPAR LPAR ]
## plain_instr -> I32 . DOT LT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GT SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GE SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT WRAPI64 [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT CONST XOR
##
## Ends in an error in state: 987.
##
## plain_instr -> I64 DOT CONST . INT [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT DIV XOR
##
## Ends in an error in state: 983.
##
## plain_instr -> I64 DOT DIV . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 979.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 977.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 975.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 972.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT GE XOR
##
## Ends in an error in state: 969.
##
## plain_instr -> I64 DOT GE . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT GE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT GT XOR
##
## Ends in an error in state: 966.
##
## plain_instr -> I64 DOT GT . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT GT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LE XOR
##
## Ends in an error in state: 963.
##
## plain_instr -> I64 DOT LE . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT LE . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 961.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 960.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 959.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 958.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 957.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD XOR
##
## Ends in an error in state: 956.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 954.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 953.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 952.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 951.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 950.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 949.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 947.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 946.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 945.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 944.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 943.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 942.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD16 XOR
##
## Ends in an error in state: 941.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 939.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 938.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 937.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 936.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 935.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 934.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 932.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 931.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 930.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 929.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 928.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 927.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD32 XOR
##
## Ends in an error in state: 926.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 924.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 923.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 922.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 921.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 920.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 919.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 917.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 916.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 915.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 914.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 913.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 912.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LOAD8 XOR
##
## Ends in an error in state: 911.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT LT XOR
##
## Ends in an error in state: 908.
##
## plain_instr -> I64 DOT LT . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT LT . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 901.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 900.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT REM XOR
##
## Ends in an error in state: 897.
##
## plain_instr -> I64 DOT REM . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT REM . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT SHR XOR
##
## Ends in an error in state: 891.
##
## plain_instr -> I64 DOT SHR . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 889.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 888.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 887.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 886.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 885.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE XOR
##
## Ends in an error in state: 884.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 882.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 881.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 880.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 879.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 878.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE16 XOR
##
## Ends in an error in state: 877.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 875.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 874.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 873.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 872.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 871.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE32 XOR
##
## Ends in an error in state: 870.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 868.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 867.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 866.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 865.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 864.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT STORE8 XOR
##
## Ends in an error in state: 863.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 859.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 856.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 853.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 850.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 849.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 848.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 847.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT TRUNC XOR
##
## Ends in an error in state: 846.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 DOT WRAPI64
##
## Ends in an error in state: 844.
##
## plain_instr -> I64 DOT . CONST INT [ RPAR LPAR ]
## plain_instr -> I64 DOT . CLZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . CTZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . POPCNT [ RPAR LPAR ]
## plain_instr -> I64 DOT . ADD [ RPAR LPAR ]
## plain_instr -> I64 DOT . SUB [ RPAR LPAR ]
## plain_instr -> I64 DOT . MUL [ RPAR LPAR ]
## plain_instr -> I64 DOT . DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REM SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . AND [ RPAR LPAR ]
## plain_instr -> I64 DOT . OR [ RPAR LPAR ]
## plain_instr -> I64 DOT . XOR [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHL [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . ROTL [ RPAR LPAR ]
## plain_instr -> I64 DOT . ROTR [ RPAR LPAR ]
## plain_instr -> I64 DOT . EQZ [ RPAR LPAR ]
## plain_instr -> I64 DOT . EQ [ RPAR LPAR ]
## plain_instr -> I64 DOT . NE [ RPAR LPAR ]
## plain_instr -> I64 DOT . LT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR I64 XOR
##
## Ends in an error in state: 843.
##
## plain_instr -> I64 . DOT CONST INT [ RPAR LPAR ]
## plain_instr -> I64 . DOT CLZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT CTZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT POPCNT [ RPAR LPAR ]
## plain_instr -> I64 . DOT ADD [ RPAR LPAR ]
## plain_instr -> I64 . DOT SUB [ RPAR LPAR ]
## plain_instr -> I64 . DOT MUL [ RPAR LPAR ]
## plain_instr -> I64 . DOT DIV SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REM SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REM UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT AND [ RPAR LPAR ]
## plain_instr -> I64 . DOT OR [ RPAR LPAR ]
## plain_instr -> I64 . DOT XOR [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHL [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHR SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT ROTL [ RPAR LPAR ]
## plain_instr -> I64 . DOT ROTR [ RPAR LPAR ]
## plain_instr -> I64 . DOT EQZ [ RPAR LPAR ]
## plain_instr -> I64 . DOT EQ [ RPAR LPAR ]
## plain_instr -> I64 . DOT NE [ RPAR LPAR ]
## plain_instr -> I64 . DOT LT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GT SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GT UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT LE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GE SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT GE UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ RPAR LPAR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1332.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 1331.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1328.
##
## expr -> LPAR BLOCK LPAR TYPE U32 RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE U32 XOR
##
## Ends in an error in state: 1327.
##
## expr -> LPAR BLOCK LPAR TYPE U32 . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1326.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK LPAR TYPE . U32 RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 1325.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK LPAR . TYPE U32 RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR BLOCK XOR
##
## Ends in an error in state: 1324.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK . LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1317.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 1316.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1313.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 1312.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 1311.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 1310.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 1309.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1306.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 1305.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1238.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 RPAR . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1237.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 . RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 1236.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . U32 RPAR call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 1235.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 1234.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1349.
##
## expr -> LPAR IF if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1343.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1342.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1341.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE U32 RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 838.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR if_block_param_body . RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 836.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE U32 XOR
##
## Ends in an error in state: 835.
##
## expr -> LPAR IF LPAR TYPE U32 . RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 834.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR TYPE . U32 RPAR if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF LPAR XOR
##
## Ends in an error in state: 833.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR IF XOR
##
## Ends in an error in state: 832.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF . LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 827.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 826.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 823.
##
## expr -> LPAR LOOP LPAR TYPE U32 RPAR . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE U32 XOR
##
## Ends in an error in state: 822.
##
## expr -> LPAR LOOP LPAR TYPE U32 . RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 821.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP LPAR TYPE . U32 RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP LPAR XOR
##
## Ends in an error in state: 820.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP LPAR . TYPE U32 RPAR block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR LOOP XOR
##
## Ends in an error in state: 819.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP . LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 804.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR PARAM RPAR XOR
##
## Ends in an error in state: 1347.
##
## if_block_param_body -> LPAR PARAM list(val_type) RPAR . if_block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR PARAM XOR
##
## Ends in an error in state: 1345.
##
## if_block_param_body -> LPAR PARAM . list(val_type) RPAR if_block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 818.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR RESULT RPAR XOR
##
## Ends in an error in state: 817.
##
## if_block_result_body -> LPAR RESULT list(val_type) RPAR . if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR RESULT XOR
##
## Ends in an error in state: 815.
##
## if_block_result_body -> LPAR RESULT . list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR SELECT RPAR LPAR XOR
##
## Ends in an error in state: 842.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR SELECT RPAR XOR
##
## Ends in an error in state: 841.
##
## if_ -> expr . if_ [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR SELECT XOR
##
## Ends in an error in state: 812.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1400.
##
## expr -> LPAR IF if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR THEN RPAR LPAR ELSE XOR
##
## Ends in an error in state: 809.
##
## if_ -> LPAR THEN instr_list RPAR LPAR ELSE . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR LPAR ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR THEN RPAR LPAR XOR
##
## Ends in an error in state: 808.
##
## if_ -> LPAR THEN instr_list RPAR LPAR . ELSE instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR THEN RPAR XOR
##
## Ends in an error in state: 807.
##
## if_ -> LPAR THEN instr_list RPAR . LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR THEN instr_list RPAR . [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN instr_list RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR THEN XOR
##
## Ends in an error in state: 805.
##
## if_ -> LPAR THEN . instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR THEN . instr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1398.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1397.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1396.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE U32 RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1394.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR if_block_param_body . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1393.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE U32 XOR
##
## Ends in an error in state: 1392.
##
## expr -> LPAR IF LPAR TYPE U32 . RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 1391.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF LPAR TYPE . U32 RPAR if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR UNREACHABLE XOR
##
## Ends in an error in state: 1337.
##
## expr -> LPAR plain_instr . expr_list RPAR [ LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF LPAR XOR
##
## Ends in an error in state: 1390.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IF XOR
##
## Ends in an error in state: 1389.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF . LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID I64 RPAR XOR
##
## Ends in an error in state: 1481.
##
## func_fields_import -> LPAR PARAM ID val_type RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID I64 XOR
##
## Ends in an error in state: 1480.
##
## func_fields_import -> LPAR PARAM ID val_type . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM ID XOR
##
## Ends in an error in state: 1479.
##
## func_fields_import -> LPAR PARAM ID . val_type RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 1472.
##
## func_fields_import -> LPAR . PARAM list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM ID val_type RPAR func_fields_import [ RPAR ]
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 1485.
##
## func_fields_import -> LPAR PARAM list(val_type) RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR PARAM XOR
##
## Ends in an error in state: 1478.
##
## func_fields_import -> LPAR PARAM . list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR PARAM . ID val_type RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 1476.
##
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 1475.
##
## func_fields_import_result -> LPAR RESULT list(val_type) RPAR . func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR RESULT XOR
##
## Ends in an error in state: 1473.
##
## func_fields_import_result -> LPAR RESULT . list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1489.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID XOR
##
## Ends in an error in state: 1488.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1471.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32 RPAR . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1470.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32 . RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR TYPE XOR
##
## Ends in an error in state: 1469.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE . ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR TYPE . U32 RPAR func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT LPAR XOR
##
## Ends in an error in state: 1468.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM list(val_type) RPAR func_fields_import [ RPAR ]
## func_fields_import -> LPAR . PARAM ID val_type RPAR func_fields_import [ RPAR ]
## func_fields_import_result -> LPAR . RESULT list(val_type) RPAR func_fields_import_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 1467.
##
## func_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME IMPORT . func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 1466.
##
## func_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME NAME . IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT NAME XOR
##
## Ends in an error in state: 1465.
##
## func_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT NAME . NAME IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR IMPORT XOR
##
## Ends in an error in state: 1464.
##
## func_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR IMPORT . NAME NAME IMPORT func_fields_import [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL DOT GET XOR
##
## Ends in an error in state: 796.
##
## plain_instr -> LOCAL DOT GET . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT GET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL DOT SET XOR
##
## Ends in an error in state: 793.
##
## plain_instr -> LOCAL DOT SET . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT SET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL DOT TEE XOR
##
## Ends in an error in state: 790.
##
## plain_instr -> LOCAL DOT TEE . ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT TEE . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL DOT XOR
##
## Ends in an error in state: 789.
##
## plain_instr -> LOCAL DOT . GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . GET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . SET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL DOT . TEE U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL ID I64 RPAR XOR
##
## Ends in an error in state: 1387.
##
## func_body -> LPAR LOCAL ID val_type RPAR . func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL ID I64 XOR
##
## Ends in an error in state: 1386.
##
## func_body -> LPAR LOCAL ID val_type . RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL ID XOR
##
## Ends in an error in state: 1385.
##
## func_body -> LPAR LOCAL ID . val_type RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL RPAR LPAR XOR
##
## Ends in an error in state: 1388.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL RPAR XOR
##
## Ends in an error in state: 1447.
##
## func_body -> LPAR LOCAL list(val_type) RPAR . func_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOCAL XOR
##
## Ends in an error in state: 1384.
##
## func_body -> LPAR LOCAL . list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR LOCAL . ID val_type RPAR func_body [ RPAR ]
## plain_instr -> LOCAL . DOT GET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT GET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT SET U32 [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE ID [ RPAR LPAR ]
## plain_instr -> LOCAL . DOT TEE U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 768.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR PARAM RPAR XOR
##
## Ends in an error in state: 777.
##
## block_param_body -> LPAR PARAM list(val_type) RPAR . block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR PARAM XOR
##
## Ends in an error in state: 775.
##
## block_param_body -> LPAR PARAM . list(val_type) RPAR block_param_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 772.
##
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR RESULT RPAR XOR
##
## Ends in an error in state: 771.
##
## block_result_body -> LPAR RESULT list(val_type) RPAR . block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR RESULT XOR
##
## Ends in an error in state: 769.
##
## block_result_body -> LPAR RESULT . list(val_type) RPAR block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1379.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 1378.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1375.
##
## expr -> LPAR LOOP LPAR TYPE U32 RPAR . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR TYPE U32 XOR
##
## Ends in an error in state: 1374.
##
## expr -> LPAR LOOP LPAR TYPE U32 . RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 1373.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP LPAR TYPE . U32 RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP LPAR XOR
##
## Ends in an error in state: 1372.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE U32 RPAR block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR LOOP XOR
##
## Ends in an error in state: 1371.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP . LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR MEMORY DOT INIT XOR
##
## Ends in an error in state: 757.
##
## plain_instr -> MEMORY DOT INIT . ID [ RPAR LPAR ]
## plain_instr -> MEMORY DOT INIT . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR MEMORY DOT XOR
##
## Ends in an error in state: 755.
##
## plain_instr -> MEMORY DOT . SIZE [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . GROW [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . FILL [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . COPY [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . INIT ID [ RPAR LPAR ]
## plain_instr -> MEMORY DOT . INIT U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR MEMORY XOR
##
## Ends in an error in state: 754.
##
## plain_instr -> MEMORY . DOT SIZE [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT GROW [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT FILL [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT COPY [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT INIT ID [ RPAR LPAR ]
## plain_instr -> MEMORY . DOT INIT U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM ID I64 RPAR XOR
##
## Ends in an error in state: 1454.
##
## func_fields_body -> LPAR PARAM ID val_type RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM ID I64 XOR
##
## Ends in an error in state: 1453.
##
## func_fields_body -> LPAR PARAM ID val_type . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM ID XOR
##
## Ends in an error in state: 1452.
##
## func_fields_body -> LPAR PARAM ID . val_type RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 703.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_fields_body -> LPAR . PARAM list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR . PARAM ID val_type RPAR func_fields_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM RPAR XOR
##
## Ends in an error in state: 1458.
##
## func_fields_body -> LPAR PARAM list(val_type) RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR PARAM XOR
##
## Ends in an error in state: 1451.
##
## func_fields_body -> LPAR PARAM . list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR PARAM . ID val_type RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR REF DOT NULL XOR
##
## Ends in an error in state: 749.
##
## plain_instr -> REF DOT NULL . FUNC_REF [ RPAR LPAR ]
## plain_instr -> REF DOT NULL . EXTERN_REF [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR REF DOT XOR
##
## Ends in an error in state: 748.
##
## plain_instr -> REF DOT . NULL FUNC_REF [ RPAR LPAR ]
## plain_instr -> REF DOT . NULL EXTERN_REF [ RPAR LPAR ]
## plain_instr -> REF DOT . IS_NULL [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR REF FUNC XOR
##
## Ends in an error in state: 745.
##
## plain_instr -> REF FUNC . ID [ RPAR LPAR ]
## plain_instr -> REF FUNC . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR REF XOR
##
## Ends in an error in state: 744.
##
## plain_instr -> REF . DOT NULL FUNC_REF [ RPAR LPAR ]
## plain_instr -> REF . DOT NULL EXTERN_REF [ RPAR LPAR ]
## plain_instr -> REF . DOT IS_NULL [ RPAR LPAR ]
## plain_instr -> REF . FUNC ID [ RPAR LPAR ]
## plain_instr -> REF . FUNC U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR RESULT I64 XOR
##
## Ends in an error in state: 129.
##
## list(val_type) -> val_type . list(val_type) [ RPAR ]
##
## The known suffix of the stack is as follows:
## val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 1370.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR RESULT RPAR XOR
##
## Ends in an error in state: 1369.
##
## func_result_body -> LPAR RESULT list(val_type) RPAR . func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR RESULT XOR
##
## Ends in an error in state: 1367.
##
## func_result_body -> LPAR RESULT . list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 1363.
##
## select_expr_result -> LPAR RESULT list(val_type) RPAR . select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR SELECT LPAR RESULT XOR
##
## Ends in an error in state: 1361.
##
## select_expr_result -> LPAR RESULT . list(val_type) RPAR select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR SELECT LPAR XOR
##
## Ends in an error in state: 736.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
## select_expr_result -> LPAR . RESULT list(val_type) RPAR select_expr_result [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR SELECT RPAR XOR
##
## Ends in an error in state: 1497.
##
## module_field -> LPAR FUNC option(id) func_fields . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR FUNC option(id) func_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR SELECT XOR
##
## Ends in an error in state: 735.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT COPY ID XOR
##
## Ends in an error in state: 732.
##
## plain_instr -> TABLE DOT COPY ID . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY ID . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT COPY U32 XOR
##
## Ends in an error in state: 729.
##
## plain_instr -> TABLE DOT COPY U32 . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY U32 . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT COPY XOR
##
## Ends in an error in state: 728.
##
## plain_instr -> TABLE DOT COPY . ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT COPY . U32 U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT FILL XOR
##
## Ends in an error in state: 725.
##
## plain_instr -> TABLE DOT FILL . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT FILL . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT GET XOR
##
## Ends in an error in state: 722.
##
## plain_instr -> TABLE DOT GET . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT GET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT GROW XOR
##
## Ends in an error in state: 719.
##
## plain_instr -> TABLE DOT GROW . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT GROW . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT INIT ID XOR
##
## Ends in an error in state: 716.
##
## plain_instr -> TABLE DOT INIT ID . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT ID . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT INIT U32 XOR
##
## Ends in an error in state: 713.
##
## plain_instr -> TABLE DOT INIT U32 . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT U32 . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT INIT XOR
##
## Ends in an error in state: 712.
##
## plain_instr -> TABLE DOT INIT . ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT INIT . U32 U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT SET XOR
##
## Ends in an error in state: 709.
##
## plain_instr -> TABLE DOT SET . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT SET . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT SIZE XOR
##
## Ends in an error in state: 706.
##
## plain_instr -> TABLE DOT SIZE . ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT SIZE . U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE DOT XOR
##
## Ends in an error in state: 705.
##
## plain_instr -> TABLE DOT . GET ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GET U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SET ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SET U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SIZE ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . SIZE U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GROW ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . GROW U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . FILL ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . FILL U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . COPY U32 U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT ID ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE DOT . INIT U32 U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TABLE XOR
##
## Ends in an error in state: 704.
##
## plain_instr -> TABLE . DOT GET ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GET U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SET ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SET U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SIZE ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT SIZE U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GROW ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT GROW U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT FILL ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT FILL U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY ID ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT COPY U32 U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT ID ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT ID U32 [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT U32 ID [ RPAR LPAR ]
## plain_instr -> TABLE . DOT INIT U32 U32 [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1462.
##
## func_fields -> LPAR TYPE ID RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TYPE ID XOR
##
## Ends in an error in state: 1461.
##
## func_fields -> LPAR TYPE ID . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 702.
##
## func_fields -> LPAR TYPE U32 RPAR . func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TYPE U32 XOR
##
## Ends in an error in state: 701.
##
## func_fields -> LPAR TYPE U32 . RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR TYPE XOR
##
## Ends in an error in state: 700.
##
## func_fields -> LPAR TYPE . ID RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR TYPE . U32 RPAR func_fields_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1279.
##
## expr -> LPAR BLOCK LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE ID XOR
##
## Ends in an error in state: 1278.
##
## expr -> LPAR BLOCK LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1275.
##
## expr -> LPAR BLOCK LPAR TYPE U32 RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE U32 XOR
##
## Ends in an error in state: 1274.
##
## expr -> LPAR BLOCK LPAR TYPE U32 . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR TYPE XOR
##
## Ends in an error in state: 1273.
##
## expr -> LPAR BLOCK LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK LPAR TYPE . U32 RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK LPAR XOR
##
## Ends in an error in state: 1272.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR BLOCK LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK LPAR . TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR BLOCK XOR
##
## Ends in an error in state: 1271.
##
## expr -> LPAR BLOCK . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK . LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR BLOCK . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR BLOCK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1295.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 1294.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1291.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 1290.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 1289.
##
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 1288.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT ID XOR
##
## Ends in an error in state: 1287.
##
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT ID . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1254.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 1253.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE ID . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 1248.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 RPAR . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 1247.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE U32 . RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 1246.
##
## expr -> LPAR CALL_INDIRECT LPAR TYPE . ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR TYPE . U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 1245.
##
## call_expr_params -> LPAR . PARAM list(val_type) RPAR call_expr_params [ RPAR ]
## call_expr_results -> LPAR . RESULT list(val_type) RPAR call_expr_results [ RPAR ]
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT LPAR . TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR CALL_INDIRECT XOR
##
## Ends in an error in state: 1244.
##
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR CALL_INDIRECT . call_expr_params RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1358.
##
## expr -> LPAR IF if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1356.
##
## expr -> LPAR IF LPAR TYPE ID RPAR if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 1355.
##
## expr -> LPAR IF LPAR TYPE ID RPAR . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE ID XOR
##
## Ends in an error in state: 1354.
##
## expr -> LPAR IF LPAR TYPE ID . RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE U32 RPAR LPAR THEN RPAR LPAR ELSE RPAR XOR
##
## Ends in an error in state: 1352.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR if_block_param_body . RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR if_block_param_body
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 803.
##
## expr -> LPAR IF LPAR TYPE U32 RPAR . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE U32 XOR
##
## Ends in an error in state: 802.
##
## expr -> LPAR IF LPAR TYPE U32 . RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR TYPE XOR
##
## Ends in an error in state: 801.
##
## expr -> LPAR IF LPAR TYPE . ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF LPAR TYPE . U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF LPAR XOR
##
## Ends in an error in state: 800.
##
## expr -> LPAR . plain_instr expr_list RPAR [ LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ LPAR ]
## expr -> LPAR IF LPAR . TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ LPAR ]
## if_ -> LPAR . THEN instr_list RPAR LPAR ELSE instr_list RPAR [ RPAR ]
## if_ -> LPAR . THEN instr_list RPAR [ RPAR ]
## if_block_param_body -> LPAR . PARAM list(val_type) RPAR if_block_param_body [ RPAR ]
## if_block_result_body -> LPAR . RESULT list(val_type) RPAR if_block_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR IF XOR
##
## Ends in an error in state: 799.
##
## expr -> LPAR IF . LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF . LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR IF . if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 783.
##
## expr -> LPAR LOOP LPAR TYPE ID RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE ID XOR
##
## Ends in an error in state: 782.
##
## expr -> LPAR LOOP LPAR TYPE ID . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 767.
##
## expr -> LPAR LOOP LPAR TYPE U32 RPAR . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE U32 XOR
##
## Ends in an error in state: 766.
##
## expr -> LPAR LOOP LPAR TYPE U32 . RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR TYPE XOR
##
## Ends in an error in state: 765.
##
## expr -> LPAR LOOP LPAR TYPE . ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP LPAR TYPE . U32 RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP LPAR XOR
##
## Ends in an error in state: 764.
##
## block_param_body -> LPAR . PARAM list(val_type) RPAR block_param_body [ RPAR ]
## block_result_body -> LPAR . RESULT list(val_type) RPAR block_result_body [ RPAR ]
## expr -> LPAR LOOP LPAR . TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP LPAR . TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR LOOP XOR
##
## Ends in an error in state: 763.
##
## expr -> LPAR LOOP . LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP . LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR LOOP . block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR SELECT RPAR XOR
##
## Ends in an error in state: 741.
##
## expr_list -> expr . expr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR SELECT XOR
##
## Ends in an error in state: 737.
##
## expr -> LPAR SELECT . select_expr_result RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR UNREACHABLE XOR
##
## Ends in an error in state: 1284.
##
## expr -> LPAR plain_instr . expr_list RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE LPAR XOR
##
## Ends in an error in state: 742.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR LPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR LPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR LPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR UNREACHABLE XOR
##
## Ends in an error in state: 1441.
##
## expr -> LPAR plain_instr . expr_list RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC LPAR XOR
##
## Ends in an error in state: 698.
##
## expr -> LPAR . plain_instr expr_list RPAR [ RPAR ]
## expr -> LPAR . SELECT select_expr_result RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT ID call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE ID RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT LPAR TYPE U32 RPAR call_expr_params RPAR [ RPAR ]
## expr -> LPAR . CALL_INDIRECT call_expr_params RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . BLOCK block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE ID RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP LPAR TYPE U32 RPAR block_param_body RPAR [ RPAR ]
## expr -> LPAR . LOOP block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE ID RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF LPAR TYPE U32 RPAR if_block_param_body RPAR [ RPAR ]
## expr -> LPAR . IF if_block_param_body RPAR [ RPAR ]
## func_body -> LPAR . LOCAL list(val_type) RPAR func_body [ RPAR ]
## func_body -> LPAR . LOCAL ID val_type RPAR func_body [ RPAR ]
## func_fields -> LPAR . TYPE ID RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR . TYPE U32 RPAR func_fields_body [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR TYPE ID RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR TYPE U32 RPAR func_fields_import [ RPAR ]
## func_fields -> LPAR . IMPORT NAME NAME IMPORT func_fields_import [ RPAR ]
## func_fields -> LPAR . EXPORT NAME RPAR func_fields [ RPAR ]
## func_fields_body -> LPAR . PARAM list(val_type) RPAR func_fields_body [ RPAR ]
## func_fields_body -> LPAR . PARAM ID val_type RPAR func_fields_body [ RPAR ]
## func_result_body -> LPAR . RESULT list(val_type) RPAR func_result_body [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR FUNC XOR
##
## Ends in an error in state: 695.
##
## module_field -> LPAR FUNC . option(id) func_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 BR XOR
##
## Ends in an error in state: 624.
##
## plain_instr -> BR . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> BR . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 BRIF XOR
##
## Ends in an error in state: 621.
##
## plain_instr -> BRIF . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> BRIF . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## BRIF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL XOR
##
## Ends in an error in state: 617.
##
## plain_instr -> CALL . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> CALL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## CALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 663.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID RPAR . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR TYPE ID XOR
##
## Ends in an error in state: 662.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE ID . RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 660.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE U32 RPAR . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR TYPE U32 XOR
##
## Ends in an error in state: 659.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE U32 . RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR TYPE XOR
##
## Ends in an error in state: 658.
##
## instr_list -> CALL_INDIRECT ID LPAR TYPE . ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR TYPE . U32 RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID LPAR XOR
##
## Ends in an error in state: 657.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID LPAR . TYPE U32 RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT ID XOR
##
## Ends in an error in state: 656.
##
## instr_list -> CALL_INDIRECT ID . LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID . LPAR TYPE U32 RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT ID . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR PARAM RPAR LPAR XOR
##
## Ends in an error in state: 641.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR PARAM RPAR XOR
##
## Ends in an error in state: 649.
##
## call_instr_params -> LPAR PARAM list(val_type) RPAR . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR PARAM XOR
##
## Ends in an error in state: 647.
##
## call_instr_params -> LPAR PARAM . list(val_type) RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 645.
##
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 644.
##
## call_instr_results -> LPAR RESULT list(val_type) RPAR . call_instr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR RESULT XOR
##
## Ends in an error in state: 642.
##
## call_instr_results -> LPAR RESULT . list(val_type) RPAR call_instr_results [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 654.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID RPAR . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR TYPE ID XOR
##
## Ends in an error in state: 653.
##
## instr_list -> CALL_INDIRECT LPAR TYPE ID . RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 640.
##
## instr_list -> CALL_INDIRECT LPAR TYPE U32 RPAR . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR TYPE U32 XOR
##
## Ends in an error in state: 639.
##
## instr_list -> CALL_INDIRECT LPAR TYPE U32 . RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR TYPE XOR
##
## Ends in an error in state: 638.
##
## instr_list -> CALL_INDIRECT LPAR TYPE . ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR TYPE . U32 RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT LPAR XOR
##
## Ends in an error in state: 637.
##
## call_instr_params -> LPAR . PARAM list(val_type) RPAR call_instr_params [ RPAR ]
## call_instr_results -> LPAR . RESULT list(val_type) RPAR call_instr_results [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR . TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT LPAR . TYPE U32 RPAR call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 CALL_INDIRECT XOR
##
## Ends in an error in state: 636.
##
## instr_list -> CALL_INDIRECT . ID LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . ID LPAR TYPE U32 RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . ID call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE ID RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . LPAR TYPE U32 RPAR call_instr_params [ RPAR ]
## instr_list -> CALL_INDIRECT . call_instr_params [ RPAR ]
##
## The known suffix of the stack is as follows:
## CALL_INDIRECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 DATA DOT DROP XOR
##
## Ends in an error in state: 614.
##
## plain_instr -> DATA DOT DROP . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> DATA DOT DROP . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## DATA DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 DATA DOT XOR
##
## Ends in an error in state: 613.
##
## plain_instr -> DATA DOT . DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> DATA DOT . DROP U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## DATA DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 DATA XOR
##
## Ends in an error in state: 612.
##
## plain_instr -> DATA . DOT DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> DATA . DOT DROP U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 ELEM DOT DROP XOR
##
## Ends in an error in state: 608.
##
## plain_instr -> ELEM DOT DROP . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> ELEM DOT DROP . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT DROP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 ELEM DOT XOR
##
## Ends in an error in state: 607.
##
## plain_instr -> ELEM DOT . DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> ELEM DOT . DROP U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## ELEM DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 ELEM XOR
##
## Ends in an error in state: 606.
##
## plain_instr -> ELEM . DOT DROP ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> ELEM . DOT DROP U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## ELEM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT CONST XOR
##
## Ends in an error in state: 601.
##
## plain_instr -> F32 DOT CONST . FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 598.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 595.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 594.
##
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT CONVERT XOR
##
## Ends in an error in state: 593.
##
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 583.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 582.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 581.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 580.
##
## plain_instr -> F32 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 579.
##
## plain_instr -> F32 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT LOAD XOR
##
## Ends in an error in state: 578.
##
## plain_instr -> F32 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 568.
##
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT REINTERPRET XOR
##
## Ends in an error in state: 567.
##
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 564.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 563.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 562.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 561.
##
## plain_instr -> F32 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 560.
##
## plain_instr -> F32 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT STORE XOR
##
## Ends in an error in state: 559.
##
## plain_instr -> F32 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 DOT XOR
##
## Ends in an error in state: 556.
##
## plain_instr -> F32 DOT . CONST FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . DEMOTE_F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F32 XOR
##
## Ends in an error in state: 555.
##
## plain_instr -> F32 . DOT CONST FLOAT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT DEMOTE_F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F32 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT CONVERT UNDERSCORE I32 XOR
##
## Ends in an error in state: 549.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT CONVERT UNDERSCORE I64 XOR
##
## Ends in an error in state: 546.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE I64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT CONVERT UNDERSCORE XOR
##
## Ends in an error in state: 545.
##
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT UNDERSCORE . I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT CONVERT XOR
##
## Ends in an error in state: 544.
##
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT CONVERT . UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT CONVERT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 535.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 534.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 533.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 532.
##
## plain_instr -> F64 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 531.
##
## plain_instr -> F64 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT LOAD XOR
##
## Ends in an error in state: 530.
##
## plain_instr -> F64 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 519.
##
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT REINTERPRET UNDERSCORE . I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT REINTERPRET XOR
##
## Ends in an error in state: 518.
##
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT REINTERPRET . UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 515.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 514.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 513.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 512.
##
## plain_instr -> F64 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 511.
##
## plain_instr -> F64 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT STORE XOR
##
## Ends in an error in state: 510.
##
## plain_instr -> F64 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 DOT XOR
##
## Ends in an error in state: 507.
##
## plain_instr -> F64 DOT . ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . PROMOTE_F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 F64 XOR
##
## Ends in an error in state: 506.
##
## plain_instr -> F64 . DOT ABS [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT NEG [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT SQRT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT CEIL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT FLOOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT TRUNC [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT NEAREST [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT DIV [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT MIN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT MAX [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT COPYSIGN [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT LT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT GT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT LE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT GE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT PROMOTE_F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT CONVERT UNDERSCORE I64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT REINTERPRET UNDERSCORE I64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> F64 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 GLOBAL DOT GET XOR
##
## Ends in an error in state: 503.
##
## plain_instr -> GLOBAL DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL DOT GET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 GLOBAL DOT SET XOR
##
## Ends in an error in state: 500.
##
## plain_instr -> GLOBAL DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL DOT SET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 GLOBAL DOT XOR
##
## Ends in an error in state: 499.
##
## plain_instr -> GLOBAL DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL DOT . GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL DOT . SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## GLOBAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 GLOBAL XOR
##
## Ends in an error in state: 498.
##
## plain_instr -> GLOBAL . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL . DOT GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> GLOBAL . DOT SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT CONST XOR
##
## Ends in an error in state: 493.
##
## plain_instr -> I32 DOT CONST . INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT DIV XOR
##
## Ends in an error in state: 489.
##
## plain_instr -> I32 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT EXTEND16 XOR
##
## Ends in an error in state: 485.
##
## plain_instr -> I32 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT EXTEND8 XOR
##
## Ends in an error in state: 483.
##
## plain_instr -> I32 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT GE XOR
##
## Ends in an error in state: 480.
##
## plain_instr -> I32 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT GT XOR
##
## Ends in an error in state: 477.
##
## plain_instr -> I32 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LE XOR
##
## Ends in an error in state: 474.
##
## plain_instr -> I32 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 472.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 471.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 470.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 469.
##
## plain_instr -> I32 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 468.
##
## plain_instr -> I32 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD XOR
##
## Ends in an error in state: 467.
##
## plain_instr -> I32 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 465.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 464.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 463.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 462.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 461.
##
## plain_instr -> I32 DOT LOAD16 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 460.
##
## plain_instr -> I32 DOT LOAD16 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 458.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 457.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 456.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 455.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 454.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 453.
##
## plain_instr -> I32 DOT LOAD16 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD16 XOR
##
## Ends in an error in state: 452.
##
## plain_instr -> I32 DOT LOAD16 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT LOAD16 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 450.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 449.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 448.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 447.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 446.
##
## plain_instr -> I32 DOT LOAD8 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 445.
##
## plain_instr -> I32 DOT LOAD8 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 443.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 442.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 441.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 440.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 439.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 438.
##
## plain_instr -> I32 DOT LOAD8 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LOAD8 XOR
##
## Ends in an error in state: 437.
##
## plain_instr -> I32 DOT LOAD8 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT LOAD8 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT LT XOR
##
## Ends in an error in state: 434.
##
## plain_instr -> I32 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 427.
##
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT REINTERPRET XOR
##
## Ends in an error in state: 426.
##
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT REM XOR
##
## Ends in an error in state: 423.
##
## plain_instr -> I32 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT SHR XOR
##
## Ends in an error in state: 417.
##
## plain_instr -> I32 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 415.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 414.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 413.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 412.
##
## plain_instr -> I32 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE OFFSET XOR
##
## Ends in an error in state: 411.
##
## plain_instr -> I32 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE XOR
##
## Ends in an error in state: 410.
##
## plain_instr -> I32 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 408.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 407.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 406.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 405.
##
## plain_instr -> I32 DOT STORE16 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 404.
##
## plain_instr -> I32 DOT STORE16 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE16 XOR
##
## Ends in an error in state: 403.
##
## plain_instr -> I32 DOT STORE16 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 401.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 400.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 399.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 398.
##
## plain_instr -> I32 DOT STORE8 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 397.
##
## plain_instr -> I32 DOT STORE8 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT STORE8 XOR
##
## Ends in an error in state: 396.
##
## plain_instr -> I32 DOT STORE8 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 392.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 389.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 386.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 383.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 382.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 381.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 380.
##
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT TRUNC XOR
##
## Ends in an error in state: 379.
##
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 DOT UNSIGNED
##
## Ends in an error in state: 376.
##
## plain_instr -> I32 DOT . CONST INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . WRAPI64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 DOT . STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I32 XOR
##
## Ends in an error in state: 375.
##
## plain_instr -> I32 . DOT CONST INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT WRAPI64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I32 . DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT CONST XOR
##
## Ends in an error in state: 370.
##
## plain_instr -> I64 DOT CONST . INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT CONST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT DIV XOR
##
## Ends in an error in state: 366.
##
## plain_instr -> I64 DOT DIV . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT DIV . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT EXTEND16 XOR
##
## Ends in an error in state: 362.
##
## plain_instr -> I64 DOT EXTEND16 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT EXTEND32 XOR
##
## Ends in an error in state: 360.
##
## plain_instr -> I64 DOT EXTEND32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT EXTEND8 XOR
##
## Ends in an error in state: 358.
##
## plain_instr -> I64 DOT EXTEND8 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT EXTEND_I32 XOR
##
## Ends in an error in state: 355.
##
## plain_instr -> I64 DOT EXTEND_I32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT EXTEND_I32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT EXTEND_I32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT GE XOR
##
## Ends in an error in state: 352.
##
## plain_instr -> I64 DOT GE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT GE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT GT XOR
##
## Ends in an error in state: 349.
##
## plain_instr -> I64 DOT GT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT GT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LE XOR
##
## Ends in an error in state: 346.
##
## plain_instr -> I64 DOT LE . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT LE . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 344.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 343.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 342.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD OFFSET EQUAL XOR
##
## Ends in an error in state: 341.
##
## plain_instr -> I64 DOT LOAD OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD OFFSET XOR
##
## Ends in an error in state: 340.
##
## plain_instr -> I64 DOT LOAD OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD XOR
##
## Ends in an error in state: 339.
##
## plain_instr -> I64 DOT LOAD . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 337.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 336.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 335.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 334.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED OFFSET XOR
##
## Ends in an error in state: 333.
##
## plain_instr -> I64 DOT LOAD16 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 SIGNED XOR
##
## Ends in an error in state: 332.
##
## plain_instr -> I64 DOT LOAD16 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 330.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 329.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 328.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 327.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 326.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 UNSIGNED XOR
##
## Ends in an error in state: 325.
##
## plain_instr -> I64 DOT LOAD16 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD16 XOR
##
## Ends in an error in state: 324.
##
## plain_instr -> I64 DOT LOAD16 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT LOAD16 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 322.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 321.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 320.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 319.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED OFFSET XOR
##
## Ends in an error in state: 318.
##
## plain_instr -> I64 DOT LOAD32 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 SIGNED XOR
##
## Ends in an error in state: 317.
##
## plain_instr -> I64 DOT LOAD32 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 315.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 314.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 313.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 312.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 311.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 UNSIGNED XOR
##
## Ends in an error in state: 310.
##
## plain_instr -> I64 DOT LOAD32 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD32 XOR
##
## Ends in an error in state: 309.
##
## plain_instr -> I64 DOT LOAD32 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT LOAD32 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 307.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 306.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 305.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 304.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED OFFSET XOR
##
## Ends in an error in state: 303.
##
## plain_instr -> I64 DOT LOAD8 SIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 SIGNED XOR
##
## Ends in an error in state: 302.
##
## plain_instr -> I64 DOT LOAD8 SIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 SIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 300.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 299.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 298.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED OFFSET EQUAL XOR
##
## Ends in an error in state: 297.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED OFFSET XOR
##
## Ends in an error in state: 296.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 UNSIGNED XOR
##
## Ends in an error in state: 295.
##
## plain_instr -> I64 DOT LOAD8 UNSIGNED . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8 UNSIGNED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LOAD8 XOR
##
## Ends in an error in state: 294.
##
## plain_instr -> I64 DOT LOAD8 . SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT LOAD8 . UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LOAD8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT LT XOR
##
## Ends in an error in state: 291.
##
## plain_instr -> I64 DOT LT . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT LT . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT REINTERPRET UNDERSCORE XOR
##
## Ends in an error in state: 284.
##
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT REINTERPRET UNDERSCORE . F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT REINTERPRET XOR
##
## Ends in an error in state: 283.
##
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT REINTERPRET . UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REINTERPRET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT REM XOR
##
## Ends in an error in state: 280.
##
## plain_instr -> I64 DOT REM . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT REM . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT SHR XOR
##
## Ends in an error in state: 274.
##
## plain_instr -> I64 DOT SHR . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT SHR . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT SHR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 272.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 271.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 270.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE OFFSET EQUAL XOR
##
## Ends in an error in state: 269.
##
## plain_instr -> I64 DOT STORE OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE OFFSET XOR
##
## Ends in an error in state: 268.
##
## plain_instr -> I64 DOT STORE OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE XOR
##
## Ends in an error in state: 267.
##
## plain_instr -> I64 DOT STORE . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 265.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 264.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 263.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 OFFSET EQUAL XOR
##
## Ends in an error in state: 262.
##
## plain_instr -> I64 DOT STORE16 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 OFFSET XOR
##
## Ends in an error in state: 261.
##
## plain_instr -> I64 DOT STORE16 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE16 XOR
##
## Ends in an error in state: 260.
##
## plain_instr -> I64 DOT STORE16 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE16
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 258.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 257.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 256.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 OFFSET EQUAL XOR
##
## Ends in an error in state: 255.
##
## plain_instr -> I64 DOT STORE32 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 OFFSET XOR
##
## Ends in an error in state: 254.
##
## plain_instr -> I64 DOT STORE32 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE32 XOR
##
## Ends in an error in state: 253.
##
## plain_instr -> I64 DOT STORE32 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL XOR
##
## Ends in an error in state: 251.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 OFFSET EQUAL U32 ALIGN XOR
##
## Ends in an error in state: 250.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 ALIGN . EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32 ALIGN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 OFFSET EQUAL U32 XOR
##
## Ends in an error in state: 249.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL U32 . ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 OFFSET EQUAL XOR
##
## Ends in an error in state: 248.
##
## plain_instr -> I64 DOT STORE8 OFFSET EQUAL . U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 OFFSET XOR
##
## Ends in an error in state: 247.
##
## plain_instr -> I64 DOT STORE8 OFFSET . EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8 OFFSET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT STORE8 XOR
##
## Ends in an error in state: 246.
##
## plain_instr -> I64 DOT STORE8 . OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT STORE8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE F32 XOR
##
## Ends in an error in state: 242.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE F64 XOR
##
## Ends in an error in state: 239.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 XOR
##
## Ends in an error in state: 236.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 XOR
##
## Ends in an error in state: 233.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 . UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE F64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE XOR
##
## Ends in an error in state: 232.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE SAT XOR
##
## Ends in an error in state: 231.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE SAT . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE SAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC UNDERSCORE XOR
##
## Ends in an error in state: 230.
##
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC UNDERSCORE . SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC UNDERSCORE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT TRUNC XOR
##
## Ends in an error in state: 229.
##
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT TRUNC . UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT TRUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 DOT WRAPI64
##
## Ends in an error in state: 227.
##
## plain_instr -> I64 DOT . CONST INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 DOT . STORE32 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64 DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 I64 XOR
##
## Ends in an error in state: 226.
##
## plain_instr -> I64 . DOT CONST INT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT CLZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT CTZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT POPCNT [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT ADD [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT SUB [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT MUL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT DIV SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT DIV UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT REM SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT REM UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT AND [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT OR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT XOR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT SHL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT SHR SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT SHR UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT ROTL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT ROTR [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EQZ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EQ [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT NE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT GT SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT GT UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT GE SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT GE UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EXTEND8 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EXTEND16 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EXTEND32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EXTEND_I32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT EXTEND_I32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F32 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 SIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT TRUNC UNDERSCORE SAT UNDERSCORE F64 UNSIGNED [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT REINTERPRET UNDERSCORE F64 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT STORE OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD8 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD8 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD16 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD16 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD32 SIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT LOAD32 UNSIGNED OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT STORE8 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT STORE16 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> I64 . DOT STORE32 OFFSET EQUAL U32 ALIGN EQUAL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## I64
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 LOCAL DOT GET XOR
##
## Ends in an error in state: 223.
##
## plain_instr -> LOCAL DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT GET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 LOCAL DOT SET XOR
##
## Ends in an error in state: 220.
##
## plain_instr -> LOCAL DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT SET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 LOCAL DOT TEE XOR
##
## Ends in an error in state: 217.
##
## plain_instr -> LOCAL DOT TEE . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT TEE . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT TEE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 LOCAL DOT XOR
##
## Ends in an error in state: 216.
##
## plain_instr -> LOCAL DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT . GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT . SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT . TEE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL DOT . TEE U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LOCAL DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 LOCAL XOR
##
## Ends in an error in state: 215.
##
## plain_instr -> LOCAL . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL . DOT GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL . DOT SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL . DOT TEE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> LOCAL . DOT TEE U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 MEMORY DOT INIT XOR
##
## Ends in an error in state: 205.
##
## plain_instr -> MEMORY DOT INIT . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT INIT . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 MEMORY DOT XOR
##
## Ends in an error in state: 203.
##
## plain_instr -> MEMORY DOT . SIZE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT . GROW [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT . FILL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT . COPY [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT . INIT ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY DOT . INIT U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## MEMORY DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 MEMORY XOR
##
## Ends in an error in state: 202.
##
## plain_instr -> MEMORY . DOT SIZE [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY . DOT GROW [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY . DOT FILL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY . DOT COPY [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY . DOT INIT ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> MEMORY . DOT INIT U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 REF DOT NULL XOR
##
## Ends in an error in state: 197.
##
## plain_instr -> REF DOT NULL . FUNC_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF DOT NULL . EXTERN_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## REF DOT NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 REF DOT XOR
##
## Ends in an error in state: 196.
##
## plain_instr -> REF DOT . NULL FUNC_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF DOT . NULL EXTERN_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF DOT . IS_NULL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## REF DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 REF FUNC XOR
##
## Ends in an error in state: 193.
##
## plain_instr -> REF FUNC . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF FUNC . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## REF FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 REF XOR
##
## Ends in an error in state: 192.
##
## plain_instr -> REF . DOT NULL FUNC_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF . DOT NULL EXTERN_REF [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF . DOT IS_NULL [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF . FUNC ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> REF . FUNC U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 633.
##
## select_instr_results -> LPAR RESULT list(val_type) RPAR . select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT LPAR RESULT XOR
##
## Ends in an error in state: 631.
##
## select_instr_results -> LPAR RESULT . list(val_type) RPAR select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT LPAR XOR
##
## Ends in an error in state: 630.
##
## select_instr_results -> LPAR . RESULT list(val_type) RPAR select_instr_results [ RPAR ]
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT SELECT LPAR RESULT RPAR XOR
##
## Ends in an error in state: 214.
##
## select_instr_results_instr -> LPAR RESULT list(val_type) RPAR . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT SELECT LPAR RESULT XOR
##
## Ends in an error in state: 212.
##
## select_instr_results_instr -> LPAR RESULT . list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT SELECT LPAR XOR
##
## Ends in an error in state: 211.
##
## select_instr_results_instr -> LPAR . RESULT list(val_type) RPAR select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT SELECT XOR
##
## Ends in an error in state: 190.
##
## select_instr_results_instr -> SELECT . select_instr_results_instr [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT UNREACHABLE XOR
##
## Ends in an error in state: 635.
##
## instr_list -> SELECT select_instr_results_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## SELECT select_instr_results_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 SELECT XOR
##
## Ends in an error in state: 189.
##
## instr_list -> SELECT . select_instr_results [ RPAR ]
## instr_list -> SELECT . select_instr_results_instr instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## SELECT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT COPY ID XOR
##
## Ends in an error in state: 186.
##
## plain_instr -> TABLE DOT COPY ID . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT COPY ID . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT COPY U32 XOR
##
## Ends in an error in state: 183.
##
## plain_instr -> TABLE DOT COPY U32 . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT COPY U32 . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT COPY XOR
##
## Ends in an error in state: 182.
##
## plain_instr -> TABLE DOT COPY . ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT COPY . ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT COPY . U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT COPY . U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT COPY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT FILL XOR
##
## Ends in an error in state: 179.
##
## plain_instr -> TABLE DOT FILL . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT FILL . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT FILL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT GET XOR
##
## Ends in an error in state: 176.
##
## plain_instr -> TABLE DOT GET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT GET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT GROW XOR
##
## Ends in an error in state: 173.
##
## plain_instr -> TABLE DOT GROW . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT GROW . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT GROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT INIT ID XOR
##
## Ends in an error in state: 170.
##
## plain_instr -> TABLE DOT INIT ID . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT INIT ID . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT INIT U32 XOR
##
## Ends in an error in state: 167.
##
## plain_instr -> TABLE DOT INIT U32 . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT INIT U32 . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT INIT XOR
##
## Ends in an error in state: 166.
##
## plain_instr -> TABLE DOT INIT . ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT INIT . ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT INIT . U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT INIT . U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT INIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT SET XOR
##
## Ends in an error in state: 163.
##
## plain_instr -> TABLE DOT SET . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT SET . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT SIZE XOR
##
## Ends in an error in state: 160.
##
## plain_instr -> TABLE DOT SIZE . ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT SIZE . U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT SIZE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE DOT XOR
##
## Ends in an error in state: 159.
##
## plain_instr -> TABLE DOT . GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . SIZE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . SIZE U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . GROW ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . GROW U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . FILL ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . FILL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . COPY ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . COPY ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . COPY U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . COPY U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . INIT ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . INIT ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . INIT U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE DOT . INIT U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 TABLE XOR
##
## Ends in an error in state: 158.
##
## plain_instr -> TABLE . DOT GET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT GET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT SET ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT SET U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT SIZE ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT SIZE U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT GROW ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT GROW U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT FILL ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT FILL U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT COPY ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT COPY ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT COPY U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT COPY U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT INIT ID ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT INIT ID U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT INIT U32 ID [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
## plain_instr -> TABLE . DOT INIT U32 U32 [ UNREACHABLE TABLE SELECT RPAR RETURN REF NOP MEMORY LOCAL I64 I32 GLOBAL F64 F32 ELEM DROP DATA CALL_INDIRECT CALL BRTABLE BRIF BR ]
##
## The known suffix of the stack is as follows:
## TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 UNREACHABLE XOR
##
## Ends in an error in state: 667.
##
## instr_list -> plain_instr . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## plain_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL I64 XOR
##
## Ends in an error in state: 690.
##
## global_fields -> val_type . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL ID EXTERN
##
## Ends in an error in state: 152.
##
## module_field -> LPAR GLOBAL option(id) . global_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR GLOBAL option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 683.
##
## global_fields -> LPAR EXPORT NAME RPAR . global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR EXPORT NAME XOR
##
## Ends in an error in state: 682.
##
## global_fields -> LPAR EXPORT NAME . RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR EXPORT XOR
##
## Ends in an error in state: 681.
##
## global_fields -> LPAR EXPORT . NAME RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT EXTERN_REF XOR
##
## Ends in an error in state: 693.
##
## module_field -> LPAR GLOBAL option(id) global_fields . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR GLOBAL option(id) global_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 678.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE val_type . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE XOR
##
## Ends in an error in state: 677.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE . val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT LPAR XOR
##
## Ends in an error in state: 676.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT LPAR . MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 675.
##
## global_fields -> LPAR IMPORT NAME NAME IMPORT . val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME NAME IMPORT . LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 674.
##
## global_fields -> LPAR IMPORT NAME NAME . IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME NAME . IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT NAME XOR
##
## Ends in an error in state: 673.
##
## global_fields -> LPAR IMPORT NAME . NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT NAME . NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR IMPORT XOR
##
## Ends in an error in state: 672.
##
## global_fields -> LPAR IMPORT . NAME NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR IMPORT . NAME NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR MUTABLE I64 RPAR XOR
##
## Ends in an error in state: 156.
##
## global_fields -> LPAR MUTABLE val_type RPAR . instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 155.
##
## global_fields -> LPAR MUTABLE val_type . RPAR instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR MUTABLE XOR
##
## Ends in an error in state: 154.
##
## global_fields -> LPAR MUTABLE . val_type RPAR instr_list [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL LPAR XOR
##
## Ends in an error in state: 153.
##
## global_fields -> LPAR . MUTABLE val_type RPAR instr_list [ RPAR ]
## global_fields -> LPAR . IMPORT NAME NAME IMPORT val_type [ RPAR ]
## global_fields -> LPAR . IMPORT NAME NAME IMPORT LPAR MUTABLE val_type RPAR [ RPAR ]
## global_fields -> LPAR . EXPORT NAME RPAR global_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR GLOBAL XOR
##
## Ends in an error in state: 151.
##
## module_field -> LPAR GLOBAL . option(id) global_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC ID XOR
##
## Ends in an error in state: 111.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) . LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) . LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) . func_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE ID RPAR RPAR XOR
##
## Ends in an error in state: 120.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE ID RPAR XOR
##
## Ends in an error in state: 119.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE ID XOR
##
## Ends in an error in state: 118.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID . RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE U32 RPAR RPAR XOR
##
## Ends in an error in state: 116.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE U32 RPAR XOR
##
## Ends in an error in state: 115.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE U32 XOR
##
## Ends in an error in state: 114.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 . RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR TYPE XOR
##
## Ends in an error in state: 113.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE . ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE . U32 RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC LPAR XOR
##
## Ends in an error in state: 112.
##
## func_type -> LPAR . PARAM list(val_type) RPAR func_type [ RPAR ]
## func_type -> LPAR . PARAM option(id) val_type RPAR func_type [ RPAR ]
## func_type_result -> LPAR . RESULT list(val_type) RPAR func_type_result [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR . TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR . TYPE U32 RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC RPAR XOR
##
## Ends in an error in state: 149.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC option(id) func_type RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC option(id) func_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR FUNC XOR
##
## Ends in an error in state: 110.
##
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC . option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC . option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR FUNC . option(id) func_type RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL I64 RPAR XOR
##
## Ends in an error in state: 108.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) val_type RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL I64 XOR
##
## Ends in an error in state: 107.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) val_type . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL ID EXTERN
##
## Ends in an error in state: 94.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) . val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) . LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE I64 RPAR RPAR XOR
##
## Ends in an error in state: 105.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE I64 RPAR XOR
##
## Ends in an error in state: 104.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE I64 XOR
##
## Ends in an error in state: 103.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type . RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL LPAR MUTABLE XOR
##
## Ends in an error in state: 96.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE . val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL LPAR XOR
##
## Ends in an error in state: 95.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR . MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL option(id) LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR GLOBAL XOR
##
## Ends in an error in state: 92.
##
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL . option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR GLOBAL . option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY ID XOR
##
## Ends in an error in state: 85.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) . NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) . NAT NAT RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY NAT NAT RPAR XOR
##
## Ends in an error in state: 90.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY NAT NAT XOR
##
## Ends in an error in state: 89.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY NAT RPAR XOR
##
## Ends in an error in state: 87.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY NAT XOR
##
## Ends in an error in state: 86.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT . RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT . NAT RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY option(id) NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR MEMORY XOR
##
## Ends in an error in state: 84.
##
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY . option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR MEMORY . option(id) NAT NAT RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE ID XOR
##
## Ends in an error in state: 69.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) . NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) . NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) . NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) . NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT EXTERN_REF RPAR XOR
##
## Ends in an error in state: 82.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT EXTERN_REF XOR
##
## Ends in an error in state: 81.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT FUNC_REF RPAR XOR
##
## Ends in an error in state: 79.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT FUNC_REF XOR
##
## Ends in an error in state: 78.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT NAT EXTERN_REF RPAR XOR
##
## Ends in an error in state: 76.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT NAT EXTERN_REF XOR
##
## Ends in an error in state: 75.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT NAT FUNC_REF RPAR XOR
##
## Ends in an error in state: 73.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT NAT FUNC_REF XOR
##
## Ends in an error in state: 72.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT NAT XOR
##
## Ends in an error in state: 71.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT . FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT . EXTERN_REF RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE NAT XOR
##
## Ends in an error in state: 70.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT . FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT . EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT . NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT . NAT EXTERN_REF RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE option(id) NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR TABLE XOR
##
## Ends in an error in state: 67.
##
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE . option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE . option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE . option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR TABLE . option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME LPAR XOR
##
## Ends in an error in state: 66.
##
## module_field -> LPAR IMPORT NAME NAME LPAR . FUNC option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . FUNC option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . FUNC option(id) func_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . TABLE option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . TABLE option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . TABLE option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . TABLE option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . MEMORY option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . MEMORY option(id) NAT NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . GLOBAL option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME LPAR . GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 65.
##
## module_field -> LPAR IMPORT NAME NAME . LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR FUNC option(id) func_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR TABLE option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR TABLE option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR TABLE option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR MEMORY option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR MEMORY option(id) NAT NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR GLOBAL option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME NAME . LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT NAME XOR
##
## Ends in an error in state: 64.
##
## module_field -> LPAR IMPORT NAME . NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR FUNC option(id) func_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR TABLE option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR MEMORY option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR MEMORY option(id) NAT NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR GLOBAL option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT NAME . NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR IMPORT XOR
##
## Ends in an error in state: 63.
##
## module_field -> LPAR IMPORT . NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR FUNC option(id) func_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR TABLE option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR MEMORY option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR MEMORY option(id) NAT NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR GLOBAL option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR IMPORT . NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR START ID RPAR XOR
##
## Ends in an error in state: 61.
##
## module_field -> LPAR LPAR START ID RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR START ID RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR START ID XOR
##
## Ends in an error in state: 60.
##
## module_field -> LPAR LPAR START ID . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR START ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR START U32 RPAR XOR
##
## Ends in an error in state: 58.
##
## module_field -> LPAR LPAR START U32 RPAR . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR START U32 RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR START U32 XOR
##
## Ends in an error in state: 57.
##
## module_field -> LPAR LPAR START U32 . RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR START U32
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR START XOR
##
## Ends in an error in state: 56.
##
## module_field -> LPAR LPAR START . ID RPAR RPAR [ RPAR ]
## module_field -> LPAR LPAR START . U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR START
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR LPAR XOR
##
## Ends in an error in state: 55.
##
## module_field -> LPAR LPAR . START ID RPAR RPAR [ RPAR ]
## module_field -> LPAR LPAR . START U32 RPAR RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY ID XOR
##
## Ends in an error in state: 34.
##
## module_field -> LPAR MEMORY option(id) . memory_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MEMORY option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR DATA STRING XOR
##
## Ends in an error in state: 49.
##
## list(STRING) -> STRING . list(STRING) [ RPAR ]
##
## The known suffix of the stack is as follows:
## STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR DATA XOR
##
## Ends in an error in state: 48.
##
## memory_fields -> LPAR DATA . list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 46.
##
## memory_fields -> LPAR EXPORT NAME RPAR . memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR EXPORT NAME XOR
##
## Ends in an error in state: 45.
##
## memory_fields -> LPAR EXPORT NAME . RPAR memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR EXPORT XOR
##
## Ends in an error in state: 44.
##
## memory_fields -> LPAR EXPORT . NAME RPAR memory_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR IMPORT NAME NAME IMPORT NAT XOR
##
## Ends in an error in state: 42.
##
## memory_fields -> LPAR IMPORT NAME NAME IMPORT NAT . [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 41.
##
## memory_fields -> LPAR IMPORT NAME NAME IMPORT . NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 40.
##
## memory_fields -> LPAR IMPORT NAME NAME . IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR IMPORT NAME XOR
##
## Ends in an error in state: 39.
##
## memory_fields -> LPAR IMPORT NAME . NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR IMPORT XOR
##
## Ends in an error in state: 38.
##
## memory_fields -> LPAR IMPORT . NAME NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY LPAR XOR
##
## Ends in an error in state: 37.
##
## memory_fields -> LPAR . IMPORT NAME NAME IMPORT NAT [ RPAR ]
## memory_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT [ RPAR ]
## memory_fields -> LPAR . EXPORT NAME RPAR memory_fields [ RPAR ]
## memory_fields -> LPAR . DATA list(STRING) RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY NAT NAT XOR
##
## Ends in an error in state: 53.
##
## module_field -> LPAR MEMORY option(id) memory_fields . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MEMORY option(id) memory_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY NAT XOR
##
## Ends in an error in state: 35.
##
## memory_fields -> NAT . [ RPAR ]
## memory_fields -> NAT . NAT [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR MEMORY XOR
##
## Ends in an error in state: 33.
##
## module_field -> LPAR MEMORY . option(id) memory_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR MEMORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE ID XOR
##
## Ends in an error in state: 9.
##
## module_field -> LPAR TABLE option(id) . table_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TABLE option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR EXPORT NAME RPAR XOR
##
## Ends in an error in state: 29.
##
## table_fields -> LPAR EXPORT NAME RPAR . table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR EXPORT NAME XOR
##
## Ends in an error in state: 28.
##
## table_fields -> LPAR EXPORT NAME . RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR EXPORT XOR
##
## Ends in an error in state: 27.
##
## table_fields -> LPAR EXPORT . NAME RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR EXPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT NAME NAME IMPORT NAT NAT XOR
##
## Ends in an error in state: 22.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT NAT . FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT NAT . EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT NAME NAME IMPORT NAT XOR
##
## Ends in an error in state: 21.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT NAT . NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT NAME NAME IMPORT XOR
##
## Ends in an error in state: 20.
##
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME IMPORT . NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT NAME NAME XOR
##
## Ends in an error in state: 19.
##
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME NAME . IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT NAME XOR
##
## Ends in an error in state: 18.
##
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT NAME . NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT NAME
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR IMPORT XOR
##
## Ends in an error in state: 17.
##
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR IMPORT . NAME NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR IMPORT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE LPAR XOR
##
## Ends in an error in state: 16.
##
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT FUNC_REF [ RPAR ]
## table_fields -> LPAR . IMPORT NAME NAME IMPORT NAT NAT EXTERN_REF [ RPAR ]
## table_fields -> LPAR . EXPORT NAME RPAR table_fields [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE NAT EXTERN_REF XOR
##
## Ends in an error in state: 31.
##
## module_field -> LPAR TABLE option(id) table_fields . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TABLE option(id) table_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE NAT NAT XOR
##
## Ends in an error in state: 11.
##
## table_fields -> NAT NAT . FUNC_REF [ RPAR ]
## table_fields -> NAT NAT . EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE NAT XOR
##
## Ends in an error in state: 10.
##
## table_fields -> NAT . FUNC_REF [ RPAR ]
## table_fields -> NAT . EXTERN_REF [ RPAR ]
## table_fields -> NAT . NAT FUNC_REF [ RPAR ]
## table_fields -> NAT . NAT EXTERN_REF [ RPAR ]
##
## The known suffix of the stack is as follows:
## NAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR TABLE XOR
##
## Ends in an error in state: 7.
##
## module_field -> LPAR TABLE . option(id) table_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR LPAR XOR
##
## Ends in an error in state: 6.
##
## module_field -> LPAR . EXPORT NAME LPAR FUNC ID RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR FUNC U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR TABLE ID RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR TABLE U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR MEMORY ID RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR MEMORY U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR GLOBAL ID RPAR RPAR [ RPAR ]
## module_field -> LPAR . EXPORT NAME LPAR GLOBAL U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR . FUNC option(id) func_fields RPAR [ RPAR ]
## module_field -> LPAR . LPAR START ID RPAR RPAR [ RPAR ]
## module_field -> LPAR . LPAR START U32 RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE ID RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR FUNC option(id) LPAR TYPE U32 RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR FUNC option(id) func_type RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR TABLE option(id) NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR TABLE option(id) NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR TABLE option(id) NAT NAT FUNC_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR TABLE option(id) NAT NAT EXTERN_REF RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR MEMORY option(id) NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR MEMORY option(id) NAT NAT RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR GLOBAL option(id) val_type RPAR RPAR [ RPAR ]
## module_field -> LPAR . IMPORT NAME NAME LPAR GLOBAL option(id) LPAR MUTABLE val_type RPAR RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE ID expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) TABLE U32 expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) DECLARE FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) DECLARE FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) DECLARE FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) DECLARE EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) DECLARE EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr FUNC list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr FUNC_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr FUNC_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr EXTERN_REF LPAR ITEM instr_list RPAR RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr EXTERN_REF expr RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) LPAR OFFSET instr_list RPAR list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . ELEM option(id) expr list(elem_var) RPAR [ RPAR ]
## module_field -> LPAR . GLOBAL option(id) global_fields RPAR [ RPAR ]
## module_field -> LPAR . TABLE option(id) table_fields RPAR [ RPAR ]
## module_field -> LPAR . MEMORY option(id) memory_fields RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM ID I64 RPAR XOR
##
## Ends in an error in state: 140.
##
## func_type -> LPAR PARAM option(id) val_type RPAR . func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id) val_type RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM ID I64 XOR
##
## Ends in an error in state: 139.
##
## func_type -> LPAR PARAM option(id) val_type . RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id) val_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM ID XOR
##
## Ends in an error in state: 138.
##
## func_type -> LPAR PARAM option(id) . val_type RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM option(id)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM RPAR XOR
##
## Ends in an error in state: 146.
##
## func_type -> LPAR PARAM list(val_type) RPAR . func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR PARAM XOR
##
## Ends in an error in state: 136.
##
## func_type -> LPAR PARAM . list(val_type) RPAR func_type [ RPAR ]
## func_type -> LPAR PARAM . option(id) val_type RPAR func_type [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT RPAR LPAR XOR
##
## Ends in an error in state: 133.
##
## func_type_result -> LPAR . RESULT list(val_type) RPAR func_type_result [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT RPAR XOR
##
## Ends in an error in state: 132.
##
## func_type_result -> LPAR RESULT list(val_type) RPAR . func_type_result [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR RESULT list(val_type) RPAR . list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT list(val_type) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR RESULT XOR
##
## Ends in an error in state: 122.
##
## func_type_result -> LPAR RESULT . list(val_type) RPAR func_type_result [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR RESULT . list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC LPAR XOR
##
## Ends in an error in state: 141.
##
## func_type -> LPAR . PARAM list(val_type) RPAR func_type [ RPAR ]
## func_type -> LPAR . PARAM option(id) val_type RPAR func_type [ RPAR ]
## func_type_result -> LPAR . RESULT list(val_type) RPAR func_type_result [ RPAR ]
## list(par(preceded(RESULT,list(val_type)))) -> LPAR . RESULT list(val_type) RPAR list(par(preceded(RESULT,list(val_type)))) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC RPAR RPAR XOR
##
## Ends in an error in state: 1862.
##
## list(par(module_field)) -> LPAR module_field RPAR . list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR module_field RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC RPAR XOR
##
## Ends in an error in state: 1861.
##
## list(par(module_field)) -> LPAR module_field . RPAR list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR module_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR FUNC XOR
##
## Ends in an error in state: 1858.
##
## module_field -> option(id) TYPE LPAR FUNC . func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE LPAR FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE LPAR XOR
##
## Ends in an error in state: 1857.
##
## module_field -> option(id) TYPE LPAR . FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR TYPE XOR
##
## Ends in an error in state: 1856.
##
## module_field -> option(id) TYPE . LPAR FUNC func_type RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## option(id) TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE LPAR XOR
##
## Ends in an error in state: 5.
##
## list(par(module_field)) -> LPAR . module_field RPAR list(par(module_field)) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE RPAR XOR
##
## Ends in an error in state: 1865.
##
## module_ -> LPAR MODULE option(id) list(par(module_field)) RPAR . EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE option(id) list(par(module_field)) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR MODULE XOR
##
## Ends in an error in state: 2.
##
## module_ -> LPAR MODULE . option(id) list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR MODULE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAR XOR
##
## Ends in an error in state: 1.
##
## module_ -> LPAR . MODULE option(id) list(par(module_field)) RPAR EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: XOR
##
## Ends in an error in state: 0.
##
## module_' -> . module_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

